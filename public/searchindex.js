var relearn_searchindex = [
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Pourquoi bien nommer les choses ? La raison est simple, on passe plus de temps a lire du code qu’a l’écrire, donc pour se simplifier la tâche de lecture du code, quel que soit le langage de programmation, il est important de bien nommer les différentes variables, méthodes etc.\nConventions de nommage en python En plus des règles liées au langage qui mèneront à un problème d’exécution (par exemple, un nom de variable ne doit pas commencer par des chiffres), il existe un nombre de convention concernant le nommage en python.\nhttps://peps.python.org/pep-0008/#naming-conventions\nType Public Packages lower_with_under Modules lower_with_under Classes CapWords Exceptions CapWords Fonctions lower_with_under() Constantes Global / Class CAPS_WITH_UNDER Variables Global / Class lower_with_under Variables d’Instance lower_with_under Nom de Methode lower_with_under() Paramètres Function / Method lower_with_under Variables locales lower_with_under La logique de nommage Bien nommer, va au dela des règles et convention du langage.\nÊtre le plus explicite possible, écrivez un nom complet. Préférez minutes à min. Si vous avez du mal à donner un nom à votre fonction, il y a probablement un problème de logique dans votre fonction. Variable non définie L’erreur “variable undefined” en Python se manifeste généralement sous la forme d’une exception NameError. Cela se produit lorsque vous essayez d’utiliser une variable qui n’a pas été définie ou déclarée dans le contexte actuel. Voici quelques scénarios courants où cette erreur peut survenir et comment les éviter :\n1. Utilisation d’une variable non définie Si vous essayez d’accéder à une variable avant de l’avoir définie, Python ne saura pas de quoi il s’agit et lèvera une NameError.\n# Mauvais exemple print(x) # NameError: name 'x' is not defined Solution : Assurez vous que la variable est définie avant de l’utiliser.\n# Bon exemple x = 10 print(x) # Affiche 10 2. Erreur de typographie Une simple faute de frappe dans le nom de la variable peut entraîner une NameError.\n# Mauvais exemple variable = 5 print(varible) # NameError: name 'varible' is not defined Solution : Vérifiez l’orthographe des noms de variables.\n# Bon exemple variable = 5 print(variable) # Affiche 5 3. Portée des variables Les variables définies à l’intérieur d’une fonction ne sont pas accessibles en dehors de cette fonction.\ndef ma_fonction(): y = 20 ma_fonction() print(y) # NameError: name 'y' is not defined Solution : Si vous avez besoin d’utiliser une variable en dehors de la fonction, vous devez la retourner ou la définir comme variable globale (ce qui est généralement déconseillé).\ndef ma_fonction(): y = 20 return y y = ma_fonction() print(y) # Affiche 20 4. Variables locales et globales Confondre les variables locales et globales peut également causer des NameError.\nz = 30 def autre_fonction(): print(z) # Fonctionne si z est global autre_fonction() Cependant, si vous essayez de modifier une variable globale sans la déclarer comme telle, vous obtiendrez une erreur.\nz = 30 def encore_une_fonction(): z += 1 # UnboundLocalError: local variable 'z' referenced before assignment encore_une_fonction() Solution : Utilisez le mot-clé global pour modifier une variable globale à l’intérieur d’une fonction.\nz = 30 def encore_une_fonction(): global z z += 1 encore_une_fonction() print(z) # Affiche 31",
    "description": "Pourquoi bien nommer les choses ? La raison est simple, on passe plus de temps a lire du code qu’a l’écrire, donc pour se simplifier la tâche de lecture du code, quel que soit le langage de programmation, il est important de bien nommer les différentes variables, méthodes etc.\nConventions de nommage en python En plus des règles liées au langage qui mèneront à un problème d’exécution (par exemple, un nom de variable ne doit pas commencer par des chiffres), il existe un nombre de convention concernant le nommage en python.",
    "tags": [],
    "title": "Erreurs avec les noms des variables",
    "uri": "/bases/langage-de-prog/erreurs/nomenclature-variables/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "La méthode str.format() nom = \"Philippe\" age = 30 print(\"Je m'appelle {} et j'ai {} ans.\".format(nom, age)) Explication:\n{} est un espace réservé pour une valeur qui sera insérée dans la chaîne de caractères. La méthode format(nom, age) remplace les accolades {} par les valeurs des variables nom et age respectivement. Donc, lorsque ce code est exécuté, il affiche :\nJe m'appelle Philippe et j'ai 30 ans. Cette méthode est très flexible et permet d’insérer plusieurs variables dans une chaîne de caractères de manière claire et lisible. L’opérateur % Exemple:\nnom = \"Nathalie\" age = 30 print(\"Je m'appelle %s et j'ai %d ans.\" % (nom, age)) Explication:\n%s est un espace réservé pour une chaîne de caractères (string).\n%d est un espace réservé pour un entier (integer).\nLa partie (“Je m’appelle %s et j’ai %d ans.” % (nom, age)) signifie que Python va remplacer %s par la valeur de la variable nom et %d par la valeur de la variable age.\nDonc, lorsque ce code est exécuté, il affiche :\nJe m'appelle Nathalie et j'ai 30 ans.",
    "description": "La méthode str.format() nom = \"Philippe\" age = 30 print(\"Je m'appelle {} et j'ai {} ans.\".format(nom, age)) Explication:\n{} est un espace réservé pour une valeur qui sera insérée dans la chaîne de caractères. La méthode format(nom, age) remplace les accolades {} par les valeurs des variables nom et age respectivement. Donc, lorsque ce code est exécuté, il affiche :",
    "tags": [],
    "title": "Formatage des chaines",
    "uri": "/bases/langage-de-prog/chaines-caracteres/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Installations",
    "content": "Pour installer Python sur Windows 10 et Windows 11, suivez ces étapes simples :\nWindows 10 Téléchargez l’installateur Python :\nRendez-vous sur le site officiel de Python et téléchargez la version stable la plus récente pour Windows. Exécutez l’installateur :\nDouble-cliquez sur le fichier téléchargé pour lancer l’installateur. Cochez l’option “Add Python to PATH” pour ajouter Python au chemin d’accès système. Cliquez sur “Install Now” pour une installation par défaut ou sur “Customize installation” pour des options avancées. Vérifiez l’installation :\nOuvrez l’invite de commande (cmd) et tapez python --version pour vérifier que Python est correctement installé. Windows 11 Téléchargez l’installateur Python :\nAllez sur le site officiel de Python et téléchargez la version la plus récente pour Windows. Exécutez l’installateur :\nDouble-cliquez sur le fichier téléchargé. Sélectionnez “Add Python to PATH” et “Install for all users”. Suivez les instructions à l’écran pour compléter l’installation. Vérifiez l’installation :\nOuvrez l’invite de commande et tapez python --version pour confirmer que Python est installé. Tutoriel YouTube (Windows 11) Installer Python sur Windows 11",
    "description": "Pour installer Python sur Windows 10 et Windows 11, suivez ces étapes simples :\nWindows 10 Téléchargez l’installateur Python :\nRendez-vous sur le site officiel de Python et téléchargez la version stable la plus récente pour Windows. Exécutez l’installateur :\nDouble-cliquez sur le fichier téléchargé pour lancer l’installateur. Cochez l’option “Add Python to PATH” pour ajouter Python au chemin d’accès système. Cliquez sur “Install Now” pour une installation par défaut ou sur “Customize installation” pour des options avancées. Vérifiez l’installation :",
    "tags": [],
    "title": "Installation de Python sur Windows",
    "uri": "/bases/outils/installations/python/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Installations",
    "content": "Le processus d’installation commence par le téléchargement du fichier EXE de Visual Studio Code, suivi de quelques instructions à l’écran. Voici les étapes nécessaires pour installer VS Code sur Windows de manière détaillée.\nÉtape 1 : Visitez le site officiel de Visual Studio Code en utilisant n’importe quel navigateur web comme Google Chrome, Microsoft Edge, etc.\nÉtape 2 : Appuyez sur le bouton Télécharger pour Windows sur le site pour commencer le téléchargement de l’application Visual Studio Code.\nÉtape 3 : Lorsque le téléchargement est terminé, l’icône de Visual Studio Code apparaît dans le dossier des téléchargements.\nÉtape 4 : Cliquez sur l’icône de l’installateur pour démarrer le processus d’installation de Visual Studio Code.\nÉtape 5 : Après l’ouverture de l’installateur, il vous demandera d’accepter les termes et conditions de Visual Studio Code. Cliquez sur J’accepte l’accord puis sur le bouton Suivant.\nÉtape 6 : Choisissez l’emplacement des données pour exécuter Visual Studio Code. Il vous demandera ensuite de parcourir l’emplacement. Cliquez ensuite sur le bouton Suivant.\nÉtape 7 : Il vous demandera alors de commencer la configuration de l’installation. Cliquez sur le bouton Installer.\nÉtape 8 : Après avoir cliqué sur Installer, il faudra environ 1 minute pour installer Visual Studio Code sur votre appareil.\nÉtape 9 : Une fois la configuration de l’installation de Visual Studio Code terminée, une fenêtre comme celle-ci apparaîtra. Cochez la case Lancer Visual Studio Code puis cliquez sur Suivant.\nÉtape 10 : Après l’étape précédente, la fenêtre de Visual Studio Code s’ouvre avec succès. Vous pouvez maintenant créer un nouveau fichier dans la fenêtre de Visual Studio Code et choisir un langage pour commencer votre aventure de programmation !\nRéférence : geeksforgeeks.org\nTutoriel YouTube (anglais) Installer VS Code sur Windows 10/11",
    "description": "Le processus d’installation commence par le téléchargement du fichier EXE de Visual Studio Code, suivi de quelques instructions à l’écran. Voici les étapes nécessaires pour installer VS Code sur Windows de manière détaillée.\nÉtape 1 : Visitez le site officiel de Visual Studio Code en utilisant n’importe quel navigateur web comme Google Chrome, Microsoft Edge, etc.",
    "tags": [],
    "title": "Installation de Visual Studio Code sur Windows",
    "uri": "/bases/outils/installations/visual-studio-code/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Installations",
    "content": "Installation des librairies Python sur Windows 10/11 Python est un langage de programmation puissant et polyvalent, largement utilisé pour l’analyse de données, la visualisation et les calculs scientifiques. Les librairies pandas, matplotlib, numpy et scipy sont parmi les plus populaires pour ces tâches. Ce chapitre vous guidera à travers les étapes nécessaires pour installer ces librairies sur un système Windows 10 ou 11.\nPrérequis Avant de commencer, assurez vous d’avoir installé Python sur votre système. Vous pouvez télécharger la dernière version de Python depuis le site officiel python.org. Pendant l’installation, assurez vous de cocher l’option “Add Python to PATH”.\nÉtape 1 : Ouvrir l’invite de commande (Windows) Ouvrir l’invite de commande sur Windows 10 et Windows 11 est assez simple. Voici les étapes pour chaque version :\nWindows 10 Utiliser le menu Démarrer :\nCliquez sur le bouton Démarrer (icône Windows en bas à gauche de l’écran). Tapez cmd ou invite de commande dans la barre de recherche. Cliquez sur Invite de commandes dans les résultats de recherche. Utiliser le raccourci clavier :\nAppuyez sur les touches Windows + R pour ouvrir la boîte de dialogue Exécuter. Tapez cmd et appuyez sur Entrée. Utiliser le menu contextuel :\nFaites un clic droit sur le bouton Démarrer. Sélectionnez Invite de commandes ou Windows PowerShell (selon la version de Windows 10). Windows 11 Utiliser le menu Démarrer :\nCliquez sur le bouton Démarrer (icône Windows au centre de la barre des tâches). Tapez cmd ou invite de commande dans la barre de recherche. Cliquez sur Invite de commandes dans les résultats de recherche. Utiliser le raccourci clavier :\nAppuyez sur les touches Windows + R pour ouvrir la boîte de dialogue Exécuter. Tapez cmd et appuyez sur Entrée. Utiliser le menu contextuel :\nFaites un clic droit sur le bouton Démarrer. Sélectionnez Terminal Windows ou Windows PowerShell (selon la version de Windows 11). Astuce supplémentaire Pour ouvrir l’invite de commande en tant qu’administrateur, faites un clic droit sur Invite de commandes ou Terminal Windows et sélectionnez Exécuter en tant qu’administrateur.\nÉtape 2 : Installation de pip pip est le gestionnaire de paquets de Python, utilisé pour installer et gérer les librairies Python. Si vous avez installé Python 3.4 ou une version ultérieure, pip est déjà inclus. Pour vérifier si pip est installé, dans l’invite de commande (CMD) tapez :\npip --version Si pip n’est pas installé, vous pouvez l’installer en téléchargeant le script get-pip.py depuis ce lien et en l’exécutant avec Python :\npython get-pip.py Étape 3 : Installation des librairies Une fois pip installé, vous pouvez installer les librairies pandas, matplotlib, numpy et scipy en utilisant les commandes suivantes dans l’invite de commande :\npip install pandas pip install matplotlib pip install numpy pip install scipy Étape 4 : Vérification de l’installation Pour vérifier que les librairies ont été correctement installées, vous pouvez ouvrir une session Python interactive en tapant python dans l’invite de commande, puis essayer d’importer chaque librairie :\nimport pandas as pd import matplotlib.pyplot as plt import numpy as np import scipy Si aucune erreur n’est affichée, cela signifie que les librairies ont été installées avec succès.\nRésolution des problèmes courants Problème : pip n’est pas reconnu comme une commande interne ou externe.\nSolution : Assurez-vous que le chemin vers le dossier Scripts de Python est ajouté à la variable d’environnement PATH. Problème : Erreur d’installation due à des permissions.\nSolution : Exécutez l’invite de commande en tant qu’administrateur. Problème : Conflits de versions.\nSolution : Utilisez des environnements virtuels pour isoler les dépendances de votre projet. Vous pouvez créer un environnement virtuel avec venv : python -m venv myenv myenv\\Scripts\\activate",
    "description": "Installation des librairies Python sur Windows 10/11 Python est un langage de programmation puissant et polyvalent, largement utilisé pour l’analyse de données, la visualisation et les calculs scientifiques. Les librairies pandas, matplotlib, numpy et scipy sont parmi les plus populaires pour ces tâches. Ce chapitre vous guidera à travers les étapes nécessaires pour installer ces librairies sur un système Windows 10 ou 11.",
    "tags": [],
    "title": "Installation des bibliothèques Python",
    "uri": "/bases/outils/installations/bibliotheques/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Installations",
    "content": "Pour installer les extensions comme Python, Pandas, Numpy, Matplotlib et SciPy dans Visual Studio Code, suivez ces étapes :\nOuvrir Visual Studio Code\nInstaller l’extension Python :\nCliquez sur l’icône des extensions dans la barre d’activité à gauche (elle ressemble à quatre carrés) ou utilisez le raccourci Ctrl+Shift+X. Recherchez Python et installez l’extension officielle développée par Microsoft. Ouvrir un terminal intégré :\nAllez dans le menu Terminal et sélectionnez Nouveau terminal (ou utilisez le raccourci Ctrl+). Installer les bibliothèques Python :\nDans le terminal, utilisez les commandes pip pour installer les bibliothèques nécessaires. Voici les commandes pour chaque bibliothèque : pip install numpy pip install pandas pip install matplotlib pip install scipy Vérifier l’installation :\nVous pouvez vérifier que les bibliothèques sont correctement installées en créant un nouveau fichier Python et en essayant d’importer les bibliothèques : import numpy as np import pandas as pd import matplotlib.pyplot as plt import scipy Installer d’autres extensions utiles : Vous pouvez également installer d’autres extensions utiles pour le développement Python, comme Jupyter pour travailler avec des notebooks Jupyter, et Python Docstring Generator pour générer des docstrings.\nRéférence : How to install Python Libraries in Visual Studio Code",
    "description": "Pour installer les extensions comme Python, Pandas, Numpy, Matplotlib et SciPy dans Visual Studio Code, suivez ces étapes :\nOuvrir Visual Studio Code\nInstaller l’extension Python :\nCliquez sur l’icône des extensions dans la barre d’activité à gauche (elle ressemble à quatre carrés) ou utilisez le raccourci Ctrl+Shift+X. Recherchez Python et installez l’extension officielle développée par Microsoft. Ouvrir un terminal intégré :",
    "tags": [],
    "title": "Installation des extensions dans VS Code",
    "uri": "/bases/outils/installations/extensions-dans-vs-code/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils",
    "content": "Dans cette section vous trouverez les informations nécessaires pour configurer votre environnement de développement sur Windows.\nInstallation de Python : Suivez nos instructions détaillées pour télécharger et installer Python sur votre système Windows. Nous vous guiderons à travers chaque étape pour vous assurer que Python est correctement configuré.\nInstallation de Visual Studio Code (VS Code) : Apprenez à installer VS Code, l’éditeur de code puissant et flexible. Nous vous montrerons comment le télécharger et l’installer facilement.\nInstallation de Pandas, Matplotlib et NumPy : Découvrez comment installer ces bibliothèques essentielles pour l’analyse de données et la visualisation. Nous vous fournirons des commandes simples pour les installer via pip.\nInstallation des extensions sur VS Code : Optimisez votre expérience de codage en installant des extensions utiles dans VS Code. Nous vous montrerons comment les ajouter à votre éditeur.",
    "description": "Dans cette section vous trouverez les informations nécessaires pour configurer votre environnement de développement sur Windows.\nInstallation de Python : Suivez nos instructions détaillées pour télécharger et installer Python sur votre système Windows. Nous vous guiderons à travers chaque étape pour vous assurer que Python est correctement configuré.\nInstallation de Visual Studio Code (VS Code) : Apprenez à installer VS Code, l’éditeur de code puissant et flexible. Nous vous montrerons comment le télécharger et l’installer facilement.",
    "tags": [],
    "title": "Installations",
    "uri": "/bases/outils/installations/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "Cette section vous permettra d’apprendre la base des bibliothèques Python de Biopython et de commencer à l’utiliser. Voici les sujets présentés:\nChapitre 1 : Introduction à Biopython Présentation de Biopython Installation et configuration Aperçu des fonctionnalités principales Chapitre 2 : Manipulation de séquences Lecture et écriture de séquences Opérations de base sur les séquences (traduction, transcription, complémentarité) Alignement de séquences Chapitre 3 : Analyse de séquences Recherche de motifs Calcul des propriétés des séquences (GC content, poids moléculaire) Utilisation des outils d’alignement (BLAST, ClustalW) Chapitre 4 : Structures de données biologiques Introduction aux objets SeqRecord et SeqFeature Annotation de séquences Manipulation des fichiers GenBank et FASTA Chapitre 5 : Accès aux bases de données biologiques Utilisation de Bio.Entrez pour accéder à NCBI Téléchargement et analyse de données génomiques Utilisation de Bio.ExPASy pour accéder aux bases de données protéiques Chapitre 6 : Visualisation de données biologiques Création de graphiques avec Matplotlib et Biopython Visualisation des alignements de séquences Visualisation des structures 3D des protéines",
    "description": "Cette section vous permettra d’apprendre la base des bibliothèques Python de Biopython et de commencer à l’utiliser. Voici les sujets présentés:\nChapitre 1 : Introduction à Biopython Présentation de Biopython Installation et configuration Aperçu des fonctionnalités principales Chapitre 2 : Manipulation de séquences Lecture et écriture de séquences Opérations de base sur les séquences (traduction, transcription, complémentarité) Alignement de séquences Chapitre 3 : Analyse de séquences Recherche de motifs Calcul des propriétés des séquences (GC content, poids moléculaire) Utilisation des outils d’alignement (BLAST, ClustalW) Chapitre 4 : Structures de données biologiques Introduction aux objets SeqRecord et SeqFeature Annotation de séquences Manipulation des fichiers GenBank et FASTA Chapitre 5 : Accès aux bases de données biologiques Utilisation de Bio.Entrez pour accéder à NCBI Téléchargement et analyse de données génomiques Utilisation de Bio.ExPASy pour accéder aux bases de données protéiques Chapitre 6 : Visualisation de données biologiques Création de graphiques avec Matplotlib et Biopython Visualisation des alignements de séquences Visualisation des structures 3D des protéines",
    "tags": [],
    "title": "Les bibliothèques de bioinformatique",
    "uri": "/bases/langage-de-prog/biopython/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "L’importance de savoir déboguer Le code que nous écrivons ne fonctionne pas toujours comme prévu et peut parfois produire des résultats inattendus.\nLorsqu’un problème survient, il est plus efficace d’utiliser un outil de débogage plutôt que de rester perplexe devant le code.\nUn débogueur permet d’exécuter le code pas à pas pour identifier précisément où se trouve l’erreur et comprendre les corrections nécessaires.\nBien que l’utilisation d’un débogueur demande du temps et des efforts, c’est une compétence essentielle pour tout développeur.\nDans cette section, vous apprendrez à utiliser les outils de base et ceux intégrés à Visual Studio Code pour rendre la correction de problèmes (bogues) dans os programmes moins ardues.",
    "description": "L’importance de savoir déboguer Le code que nous écrivons ne fonctionne pas toujours comme prévu et peut parfois produire des résultats inattendus.\nLorsqu’un problème survient, il est plus efficace d’utiliser un outil de débogage plutôt que de rester perplexe devant le code.\nUn débogueur permet d’exécuter le code pas à pas pour identifier précisément où se trouve l’erreur et comprendre les corrections nécessaires.",
    "tags": [],
    "title": "Techniques de débogage",
    "uri": "/bases/langage-de-prog/debogage/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils",
    "content": "Visual Studio Code \u0026 Jupyter Sauvegarde avec Visual Studio Code",
    "description": "Visual Studio Code \u0026 Jupyter Sauvegarde avec Visual Studio Code",
    "tags": [],
    "title": "Utilisation de VS Code",
    "uri": "/bases/outils/vs-code/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes avec les opérateurs Les erreurs avec les opérateurs en Python peuvent être frustrantes, mais avec une attention aux détails et l’utilisation des bonnes pratiques, elles peuvent être évitées. En suivant les astuces mentionnées, vous pouvez écrire du code plus robuste et plus facile à déboguer.\nEn Python, les opérateurs arithmétiques, de comparaison et logiques sont essentiels pour manipuler les données et contrôler le flux du programme. Cependant, des erreurs peuvent survenir, surtout pour les débutants.\nVoici quelques erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Erreurs avec les opérateurs arithmétiques Les opérateurs arithmétiques incluent +, -, *, /, //, %, et **.\nErreurs courantes :\nDivision par zéro : Tenter de diviser un nombre par zéro lève une exception ZeroDivisionError. Types incompatibles : Additionner une chaîne de caractères avec un nombre (\"3\" + 3) lève une exception TypeError. Précision des flottants : Les opérations sur les nombres flottants peuvent entraîner des résultats inattendus en raison de la précision limitée. Astuces pour les éviter :\nVérification des dénominateurs : Toujours vérifier que le dénominateur n’est pas zéro avant de diviser. if denominator != 0: result = numerator / denominator else: print(\"Erreur : Division par zéro\") Conversion explicite des types : Utiliser les fonctions int(), float(), ou str() pour convertir les types avant les opérations. result = int(\"3\") + 3 Utilisation de la bibliothèque decimal : Pour des calculs nécessitant une haute précision, utiliser la bibliothèque decimal. from decimal import Decimal result = Decimal('0.1') + Decimal('0.2') 2. Erreurs avec les opérateurs de comparaison Les opérateurs de comparaison incluent ==, !=, \u003e, \u003c, \u003e=, et \u003c=.\nErreurs courantes :\nConfusion entre = et == : Utiliser = au lieu de == dans une condition lève une exception SyntaxError. Comparaison de types incompatibles : Comparer des types incompatibles (\"3\" == 3) lève une exception TypeError. Astuces pour les éviter :\nRelecture du code : Toujours relire le code pour vérifier l’utilisation correcte des opérateurs. Utilisation de l’IDE : Utiliser un environnement de développement intégré (IDE) qui souligne les erreurs syntaxiques. Conversion explicite des types : Assurer que les types des variables comparées sont compatibles. if str(3) == \"3\": print(\"Les valeurs sont égales\") 3. Erreurs avec les opérateurs logiques Les opérateurs logiques incluent and, or, et not.\nErreurs courantes :\nPriorité des opérateurs : Oublier les parenthèses peut entraîner des résultats inattendus. True or False and False # Équivaut à True (True or False) and False # Équivaut à False Évaluation paresseuse : En Python, les opérateurs logiques utilisent l’évaluation paresseuse, ce qui peut causer des comportements inattendus si des effets de bord sont présents. Astuces pour les éviter :\nUtilisation des parenthèses : Toujours utiliser des parenthèses pour clarifier l’ordre des opérations. if (condition1 and condition2) or condition3: # Code Compréhension de l’évaluation paresseuse : Être conscient de l’évaluation paresseuse et structurer le code en conséquence. if (func1() and func2()) or func3(): # Code",
    "description": "Les erreurs communes avec les opérateurs Les erreurs avec les opérateurs en Python peuvent être frustrantes, mais avec une attention aux détails et l’utilisation des bonnes pratiques, elles peuvent être évitées. En suivant les astuces mentionnées, vous pouvez écrire du code plus robuste et plus facile à déboguer.\nEn Python, les opérateurs arithmétiques, de comparaison et logiques sont essentiels pour manipuler les données et contrôler le flux du programme. Cependant, des erreurs peuvent survenir, surtout pour les débutants.",
    "tags": [],
    "title": "Erreurs avec les opérateurs",
    "uri": "/bases/langage-de-prog/erreurs/operateurs/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Les bibliothèques de bioinformatique",
    "content": "Présentation de Biopython Biopython est une collection de bibliothèques Python conçues pour faciliter le travail en bioinformatique. Il offre des outils pour manipuler des séquences biologiques, accéder à des bases de données biologiques, effectuer des analyses de séquences, et bien plus encore. Biopython est largement utilisé par les bioinformaticiens pour automatiser et simplifier les tâches courantes en biologie computationnelle.\nInstallation et configuration Pour commencer à utiliser Biopython, vous devez d’abord l’installer. Voici comment procéder :\nInstallation via pip :\npip install biopython Vérification de l’installation : Après l’installation, vous pouvez vérifier que Biopython est correctement installé en important le module dans un script Python :\nimport Bio print(Bio.__version__) Configuration de l’environnement : Assurez-vous que votre environnement de développement est configuré pour utiliser Biopython. Vous pouvez utiliser des environnements virtuels pour isoler vos projets :\npython -m venv myenv source myenv/bin/activate # Sur Windows, utilisez `myenv\\Scripts\\activate` pip install biopython Aperçu des fonctionnalités principales Biopython offre une multitude de fonctionnalités. Voici un aperçu des plus courantes :\nManipulation de séquences : Biopython permet de lire, écrire et manipuler des séquences biologiques. Voici un exemple simple de lecture d’un fichier FASTA :\nfrom Bio import SeqIO for record in SeqIO.parse(\"example.fasta\", \"fasta\"): print(record.id) print(record.seq) Accès aux bases de données : Vous pouvez accéder à des bases de données biologiques en ligne, comme NCBI, pour télécharger des séquences et des informations. Par exemple, pour télécharger une séquence à partir de NCBI :\nfrom Bio import Entrez Entrez.email = \"your.email@example.com\" handle = Entrez.efetch(db=\"nucleotide\", id=\"NM_001301717\", rettype=\"gb\", retmode=\"text\") record = handle.read() print(record) Analyse de séquences : Biopython offre des outils pour analyser des séquences, comme le calcul du contenu en GC :\nfrom Bio.SeqUtils import gc_fraction seq = \"AGCTATAG\" print(gc_fraction(seq)) Exercices Exercice 1 : Installation de Biopython\nInstallez Biopython sur votre machine. Vérifiez l’installation en imprimant la version de Biopython. Exercice 2 : Lecture de séquences\nTéléchargez un fichier FASTA d’exemple. Écrivez un script Python pour lire et afficher les séquences du fichier. Exercice 3 : Accès à NCBI\nUtilisez Biopython pour télécharger une séquence génomique à partir de NCBI. Affichez les informations de la séquence téléchargée. Exercice 4 : Analyse de séquences\nÉcrivez un script pour calculer le contenu en GC d’une séquence donnée. Testez votre script avec différentes séquences.",
    "description": "Présentation de Biopython Biopython est une collection de bibliothèques Python conçues pour faciliter le travail en bioinformatique. Il offre des outils pour manipuler des séquences biologiques, accéder à des bases de données biologiques, effectuer des analyses de séquences, et bien plus encore. Biopython est largement utilisé par les bioinformaticiens pour automatiser et simplifier les tâches courantes en biologie computationnelle.\nInstallation et configuration Pour commencer à utiliser Biopython, vous devez d’abord l’installer. Voici comment procéder :",
    "tags": [],
    "title": "Introduction à Biopython",
    "uri": "/bases/langage-de-prog/biopython/intro/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Techniques de débogage",
    "content": "Qu’est-ce que la trace d’exécution ? La trace d’exécution est un outil, sous forme d’un tableau, qui permet de vérifier le bon fonctionnement d’un algorithme. Elle montre l’évolution des valeurs de chacune des variables tout au long du déroulement de l’algorithme (exécution pas-à-pas).\nConstruction du tableau de la trace Les colonnes du tableau correspondent aux variables déclarées dans l’algorithme. Le titre des colonnes est le nom des variables. Le titre des lignes est le numéro des lignes de l’algorithme. Dans une cellule, on inscrira la valeur de la variable correspondante seulement si elle a changé après l’exécution de l’instruction. On peut ajouter une colonne «Console» pour simuler l’affichage à la console. Vidéo explicative: Vidéo explicative sur la trace d’exécution Exemple Prenons l’exemple de cet algorithme simple en supposant que l’utilisateur saisira 5 et 10:\n1 2 3 4 5 6 7 8 9 10 11 # Exemple d'un programme simple qui effectue la somme de 2 nombres # Données en entrée print(\"Veuillez saisir deux nombres pour en faire la somme : \") nombre1 = int(input(\"Nombre 1 : \")) nombre2 = int(input(\"Nombre 2 : \")) # Traitement somme = nombre1 + nombre2 # Affichage print(\"La somme des deux nombres saisis est égale à : \", somme) # nombre1 nombre2 somme Console 1 Saisir deux nombres pour en faire la somme 2 Nombre 1 : 3 5 4 Nombre 2 : 5 10 6 15 7 La somme des deux nombres saisis est égale à : 15",
    "description": "Qu’est-ce que la trace d’exécution ? La trace d’exécution est un outil, sous forme d’un tableau, qui permet de vérifier le bon fonctionnement d’un algorithme. Elle montre l’évolution des valeurs de chacune des variables tout au long du déroulement de l’algorithme (exécution pas-à-pas).\nConstruction du tableau de la trace Les colonnes du tableau correspondent aux variables déclarées dans l’algorithme. Le titre des colonnes est le nom des variables. Le titre des lignes est le numéro des lignes de l’algorithme. Dans une cellule, on inscrira la valeur de la variable correspondante seulement si elle a changé après l’exécution de l’instruction. On peut ajouter une colonne «Console» pour simuler l’affichage à la console. Vidéo explicative: Vidéo explicative sur la trace d’exécution Exemple Prenons l’exemple de cet algorithme simple en supposant que l’utilisateur saisira 5 et 10:",
    "tags": [],
    "title": "La trace d'exécution",
    "uri": "/bases/langage-de-prog/debogage/trace/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Les bibliothèques de bioinformatique",
    "content": "Lecture et écriture de séquences Biopython facilite la lecture et l’écriture de séquences à partir de différents formats de fichiers biologiques comme FASTA, GenBank, etc.\nExemple : Lecture d’un fichier FASTA\nfrom Bio import SeqIO # Lecture d'un fichier FASTA for record in SeqIO.parse(\"example.fasta\", \"fasta\"): print(f\"ID: {record.id}\") print(f\"Séquence: {record.seq}\") print(f\"Description: {record.description}\") Exemple : Écriture dans un fichier FASTA\nfrom Bio.Seq import Seq from Bio.SeqRecord import SeqRecord from Bio import SeqIO # Création d'un objet SeqRecord record = SeqRecord( Seq(\"AGTACACTGGT\"), id=\"example\", description=\"Exemple de séquence\" ) # Écriture dans un fichier FASTA SeqIO.write(record, \"output.fasta\", \"fasta\") Opérations de base sur les séquences Biopython permet d’effectuer diverses opérations sur les séquences, telles que la traduction, la transcription et la complémentarité.\nExemple : Traduction d’une séquence d’ADN en protéine\nfrom Bio.Seq import Seq # Séquence d'ADN dna_seq = Seq(\"ATGGCCATTGTAATGGGCCGCTGAAAGGGTGCCCGATAG\") # Traduction en protéine protein_seq = dna_seq.translate() print(protein_seq) Exemple : Transcription d’une séquence d’ADN en ARN\n# Transcription en ARN rna_seq = dna_seq.transcribe() print(rna_seq) Exemple : Obtention de la séquence complémentaire\n# Séquence complémentaire complement_seq = dna_seq.complement() print(complement_seq) # Séquence complémentaire inverse reverse_complement_seq = dna_seq.reverse_complement() print(reverse_complement_seq) Alignement de séquences L’alignement de séquences est une technique utilisée pour identifier les régions de similarité entre des séquences biologiques. Biopython utilise des outils comme ClustalW et MUSCLE pour effectuer ces alignements.\nExemple : Alignement de séquences avec ClustalW\nfrom Bio.Align.Applications import ClustalwCommandline # Chemin vers l'exécutable ClustalW et le fichier d'entrée clustalw_exe = \"/path/to/clustalw2\" in_file = \"example.fasta\" # Commande ClustalW clustalw_cline = ClustalwCommandline(clustalw_exe, infile=in_file) stdout, stderr = clustalw_cline() print(stdout) Exemple : Lecture d’un alignement\nfrom Bio import AlignIO # Lecture d'un fichier d'alignement alignment = AlignIO.read(\"example.aln\", \"clustal\") print(alignment) Exercices Exercice 1 : Lecture et écriture de séquences\nTéléchargez un fichier FASTA contenant plusieurs séquences. Écrivez un script pour lire et afficher chaque séquence avec son ID et sa description. Créez une nouvelle séquence et écrivez-la dans un fichier FASTA. Exercice 2 : Opérations sur les séquences\nÉcrivez un script pour traduire une séquence d’ADN en protéine. Transcrivez une séquence d’ADN en ARN. Obtenez la séquence complémentaire et la séquence complémentaire inverse d’une séquence d’ADN. Exercice 3 : Alignement de séquences\nUtilisez ClustalW pour aligner plusieurs séquences d’ADN. Lisez et affichez l’alignement obtenu. Analysez les régions de similarité entre les séquences alignées.",
    "description": "Lecture et écriture de séquences Biopython facilite la lecture et l’écriture de séquences à partir de différents formats de fichiers biologiques comme FASTA, GenBank, etc.\nExemple : Lecture d’un fichier FASTA\nfrom Bio import SeqIO # Lecture d'un fichier FASTA for record in SeqIO.parse(\"example.fasta\", \"fasta\"): print(f\"ID: {record.id}\") print(f\"Séquence: {record.seq}\") print(f\"Description: {record.description}\") Exemple : Écriture dans un fichier FASTA\nfrom Bio.Seq import Seq from Bio.SeqRecord import SeqRecord from Bio import SeqIO # Création d'un objet SeqRecord record = SeqRecord( Seq(\"AGTACACTGGT\"), id=\"example\", description=\"Exemple de séquence\" ) # Écriture dans un fichier FASTA SeqIO.write(record, \"output.fasta\", \"fasta\") Opérations de base sur les séquences Biopython permet d’effectuer diverses opérations sur les séquences, telles que la traduction, la transcription et la complémentarité.",
    "tags": [],
    "title": "Manipulation de Séquences",
    "uri": "/bases/langage-de-prog/biopython/manipulation/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "Au fil des semaines nous aurons l’occasion de localiser et de corriger différentes erreurs (ou bogues). Dans cette section “Erreurs et débogage”, vous trouverez des techniques qui permettent de déboguer vos programmes.\nLa méthode Print et le débogage Une erreur de syntaxe signifie que le code n’est pas conforme aux règles de syntaxe du langage. Cela est habituellement détecté immédiatement.\nPar exemple, si on oublie d’indenter correctement le code, ou une parenthèse dans une fonction, cela génère une erreur de syntaxe.\nLa syntaxe et les erreurs d’exécution en Python Python est un langage de programmation réputé pour sa simplicité et sa lisibilité. Toutefois, comme tout langage de programmation, il est sujet aux erreurs de syntaxe et d’exécution.\nComprendre la syntaxe de Python et savoir comment gérer les erreurs d’exécution est essentiel pour écrire des programmes robustes et fiables. La détection et la correction des erreurs, qu’elles soient de syntaxe ou d’exécution, permettent d’améliorer la qualité du code et d’assurer son bon fonctionnement.\nComprendre comment identifier et corriger ces erreurs est essentiel pour tout développeur.\nLes erreurs que l’on rencontre en programmation sont de 2 types:\nsyntaxique: Comme dans un langage naturelle, on peut faire des fautes d’orthographe ou de grammaire. logique: La syntaxe est correcte, mais les opérations ne répondent pas au problème, ou donnent un mauvais résultat. La syntaxe en Python La syntaxe de Python est conçue pour être claire et concise.\nVoici quelques rappel des éléments clés de la syntaxe Python :\nIndentation:\nPython utilise l’indentation pour délimiter les blocs de code. Une indentation incorrecte entraînera une erreur de syntaxe.\nDéclaration des variables\nLes variables en Python sont créées en les assignant à une valeur sans avoir besoin de déclarer leur type explicitement.\nStructures de contrôle\nLes structures de contrôle, comme les boucles et les conditions, doivent être correctement indentées et formées.\nLes erreurs de syntaxe Les erreurs de syntaxe surviennent lorsque le code ne respecte pas les règles syntaxiques de Python. Ces erreurs sont détectées lors de la phase d’interprétation du code, avant l’exécution du programme.\n1. Les erreurs d’indentation Les erreurs d’indentation sont parmi les plus courantes en Python. Elles se produisent lorsque les blocs de code ne sont pas correctement alignés.\ndef ma_fonction(): print(\"Début de la fonction\") print(\"Erreur d'indentation ici\") # Erreur d'indentation 2. Parenthèses, crochets et accolades non fermés Les erreurs de parenthèses et de crochets non fermés se produisent lorsque les parenthèses, crochets ou accolades ne sont pas correctement fermés.\n# Manque une parenthèse fermante print(\"Bonjour\" # Manque un crochet fermant ma_liste = [1, 2, 3, 4 3. Syntaxe invalide D’autres erreurs de syntaxe incluent l’utilisation incorrecte des mots-clés ou des opérateurs.\n# Utilisation incorrecte du mot-clé def 123fonction(): # Les noms de fonctions ne peuvent pas commencer par un chiffre # Opérateur incorrect resultat = 5 * * 2 # Les opérateurs doivent être correctement espacés 4. Erreurs d’exécution Les erreurs d’exécution, ou exceptions, surviennent pendant l’exécution du programme. Elles sont souvent causées par des opérations illégales, telles que la division par zéro ou l’accès à un index de liste inexistant.\nLes types d’exceptions courantes ZeroDivisionError Cette erreur se produit lorsqu’une division par zéro est tentée.\na = 10 / 0 # ZeroDivisionError IndexError Cette erreur se produit lorsqu’un index inexistant est accédé dans une liste.\nma_liste = [1, 2, 3] print(ma_liste[5]) # IndexError KeyError Cette erreur se produit lorsqu’une clé inexistante est accédée dans un dictionnaire.\nmon_dict = {\"nom\": \"Alice\", \"âge\": 25} print(mon_dict[\"adresse\"]) # KeyError TypeError Cette erreur se produit lorsqu’une opération ou une fonction est appliquée à un objet de type inapproprié.\nprint(\"Bonjour\" + 5) # TypeError Gestion des exceptions Python permet de gérer les exceptions à l’aide des blocs try-except. Cela permet d’attraper les erreurs et de les traiter de manière appropriée sans interrompre l’exécution du programme.\ntry: resultat = 10 / 0 except ZeroDivisionError: print(\"Erreur : division par zéro\") Il est également possible de gérer plusieurs types d’exceptions dans un même bloc try-except.\ntry: ma_liste = [1, 2, 3] print(ma_liste[5]) except IndexError: print(\"Erreur : index de liste incorrect\") except ZeroDivisionError: print(\"Erreur : division par zéro\") Messages d’erreur et débogage Les messages d’erreur en Python sont généralement explicites et indiquent la nature de l’erreur ainsi que la ligne du code où elle s’est produite. Analyser ces messages est crucial pour identifier et corriger les erreurs.\nExemple de message d’erreur Traceback (most recent call last): File \"main.py\", line 2, in \u003cmodule\u003e a = 10 / 0 ZeroDivisionError: division by zero Dans cet exemple, le message d’erreur indique une ZeroDivisionError sur la ligne 2 de main.py.\nVérification du fonctionnement d’un Programme La méthode print est l’une des techniques les plus simples et les plus couramment utilisées pour déboguer un programme en Python. Bien que ce ne soit pas la méthode la plus sophistiquée ni la plus efficace pour les projets complexes, print peut être extrêmement utile pour comprendre le flux d’exécution d’un programme, inspecter les valeurs des variables et identifier les points où le programme ne fonctionne pas comme prévu.\nPrincipe de base L’idée de base de l’utilisation de print pour le débogage est d’insérer des instructions print à divers endroits du programme pour afficher les valeurs des variables et les messages d’état. Cela permet de suivre l’exécution du programme et de localiser les problèmes.\ndef addition(a, b): print(f\"Entrée dans la fonction addition avec a={a} et b={b}\") resultat = a + b print(f\"Résultat de l'addition: {resultat}\") return resultat # Exemple d'utilisation resultat = addition(3, 5) print(f\"Le résultat final est: {resultat}\") Suivi du flux d’exécution En ajoutant des instructions print à différents endroits du programme, vous pouvez suivre le flux d’exécution et voir quelles parties du code sont exécutées. Cela est particulièrement utile pour les structures de contrôle comme les boucles et les conditions.\ndef verifier_parite(nombre): print(f\"Vérification de la parité pour le nombre: {nombre}\") if nombre % 2 == 0: print(\"Le nombre est pair\") return True else: print(\"Le nombre est impair\") return False # Exemple d'utilisation for i in range(5): resultat = verifier_parite(i) print(f\"Le nombre {i} est pair: {resultat}\") Inspection des variables L’une des utilisations les plus courantes de print est d’inspecter les valeurs des variables à différents points du programme. Cela permet de vérifier que les variables contiennent les valeurs attendues.\ndef calculer_somme_liste(liste): somme = 0 for element in liste: print(f\"Ajout de {element} à la somme actuelle de {somme}\") somme += element print(f\"La somme totale est: {somme}\") return somme # Exemple d'utilisation ma_liste = [1, 2, 3, 4] resultat = calculer_somme_liste(ma_liste) print(f\"Le résultat final est: {resultat}\") Débogage des fonctions récursives Le débogage des fonctions récursives peut être particulièrement difficile. L’utilisation de print pour afficher les valeurs des arguments à chaque appel récursif peut aider à comprendre le comportement de la fonction.\ndef factorielle(n): print(f\"Calcul de factorielle({n})\") if n == 0: return 1 else: resultat = n * factorielle(n - 1) print(f\"Résultat intermédiaire pour factorielle({n}): {resultat}\") return resultat # Exemple d'utilisation resultat = factorielle(5) print(f\"Le résultat final est: {resultat}\") Messages d’erreur et expressions conditionnelles Inclure des messages d’erreur conditionnels peut aider à identifier pourquoi une certaine branche du code est exécutée ou pourquoi une erreur se produit.\ndef division(a, b): if b == 0: print(\"Erreur: Tentative de division par zéro\") return None else: resultat = a / b print(f\"Résultat de la division: {resultat}\") return resultat # Exemple d'utilisation resultat = division(10, 0) if resultat is not None: print(f\"Le résultat final est: {resultat}\") Les limites de la méthode print Bien que la méthode print soit simple et efficace pour les petits projets ou pour un débogage rapide, elle présente des limites, notamment :\nVerbiage excessif : Trop d’instructions print peuvent rendre la sortie du programme difficile à lire. Performance : L’utilisation excessive de print peut ralentir l’exécution du programme. Gestion des erreurs : print ne gère pas les exceptions ou les erreurs de manière structurée. Pour ces raisons, il est souvent préférable d’utiliser des outils de débogage plus avancés, comme les tests unitaires ou les débogueurs intégrés, pour les projets plus complexes.",
    "description": "Au fil des semaines nous aurons l’occasion de localiser et de corriger différentes erreurs (ou bogues). Dans cette section “Erreurs et débogage”, vous trouverez des techniques qui permettent de déboguer vos programmes.\nLa méthode Print et le débogage Une erreur de syntaxe signifie que le code n’est pas conforme aux règles de syntaxe du langage. Cela est habituellement détecté immédiatement.",
    "tags": [],
    "title": "Erreurs communes",
    "uri": "/bases/langage-de-prog/erreurs/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes lors de la lecture de données au clavier La lecture de données au clavier en Python peut être source d’erreurs, mais en suivant les bonnes pratiques et en utilisant les astuces mentionnées, vous pouvez éviter ces erreurs et rendre votre code plus robuste.\nLa lecture de données au clavier est une tâche courante en Python, souvent réalisée avec la fonction input(). Cependant, des erreurs peuvent survenir, surtout pour les débutants. Explorons les erreurs courantes et voyons comment les éviter et les détecter facilement.\n1. Erreurs de type Erreurs courantes :\nConversion de type : La fonction input() retourne toujours une chaîne de caractères. Oublier de convertir cette chaîne en un autre type peut causer des erreurs. age = input(\"Entrez votre âge : \") print(age + 5) # TypeError: can only concatenate str (not \"int\") to str Astuces pour les éviter :\nConversion explicite : Convertir la chaîne de caractères en l’autre type nécessaire. age = int(input(\"Entrez votre âge : \")) print(age + 5) Utilisation de try et except : Gérer les exceptions pour éviter les plantages du programme. try: age = int(input(\"Entrez votre âge : \")) print(age + 5) except ValueError: print(\"Veuillez entrer un nombre valide.\") 2. Entrées inattendues Erreurs courantes :\nEntrées vides : L’utilisateur peut appuyer sur Entrée sans rien saisir, ce qui peut causer des erreurs si le programme attend une entrée spécifique. name = input(\"Entrez votre nom : \") if name == \"\": print(\"Erreur : le nom ne peut pas être vide.\") Astuces pour les éviter :\nValidation des entrées : Vérifier que l’entrée n’est pas vide et correspond aux attentes. name = input(\"Entrez votre nom : \") while not name.strip(): print(\"Erreur : le nom ne peut pas être vide.\") name = input(\"Entrez votre nom : \") 3. Gestion des espaces et des caractères spéciaux Erreurs courantes :\nEspaces non désirés : Les espaces en début ou fin de chaîne peuvent causer des problèmes lors de la comparaison ou du traitement des données. password = input(\"Entrez votre mot de passe : \") if password == \"secret \": print(\"Accès refusé.\") Astuces pour les éviter :\nUtilisation de strip() : Supprimer les espaces en début et fin de chaîne. password = input(\"Entrez votre mot de passe : \").strip() if password == \"secret\": print(\"Accès accordé.\") 4. Lecture de plusieurs valeurs Erreurs courantes :\nSéparation incorrecte des valeurs : Lire plusieurs valeurs séparées par des espaces ou des virgules peut causer des erreurs si la séparation n’est pas gérée correctement. data = input(\"Entrez deux nombres séparés par une virgule : \") num1, num2 = data.split(\",\") print(int(num1) + int(num2)) Astuces pour les éviter :\nValidation et gestion des exceptions : Vérifier que les valeurs sont correctement séparées et gérer les exceptions. data = input(\"Entrez deux nombres séparés par une virgule : \") try: num1, num2 = data.split(\",\") print(int(num1) + int(num2)) except ValueError: print(\"Erreur : veuillez entrer deux nombres séparés par une virgule.\")",
    "description": "Les erreurs communes lors de la lecture de données au clavier La lecture de données au clavier en Python peut être source d’erreurs, mais en suivant les bonnes pratiques et en utilisant les astuces mentionnées, vous pouvez éviter ces erreurs et rendre votre code plus robuste.\nLa lecture de données au clavier est une tâche courante en Python, souvent réalisée avec la fonction input(). Cependant, des erreurs peuvent survenir, surtout pour les débutants. Explorons les erreurs courantes et voyons comment les éviter et les détecter facilement.",
    "tags": [],
    "title": "Erreurs lors de la lecture de données au clavier",
    "uri": "/bases/langage-de-prog/erreurs/lecture-donnees/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes avec les structures if, elif et else Les structures conditionnelles if, elif et else sont fondamentales en programmation pour contrôler le flux d’exécution du programme. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Voici les erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Erreurs de syntaxe Erreurs courantes :\nOublier les deux-points (:) : Chaque condition if, elif et else doit se terminer par un deux-points. if condition # Code Astuces pour les éviter :\nRelecture du code : Toujours vérifier que chaque condition se termine par un deux-points. Utilisation de l’IDE : Utiliser un environnement de développement intégré (IDE) qui souligne les erreurs syntaxiques. 2. Indentation incorrecte Erreurs courantes :\nMauvaise indentation : Python utilise l’indentation pour définir les blocs de code. Une mauvaise indentation peut causer des erreurs IndentationError. if condition: print(\"Condition vraie\") # IndentationError Astuces pour les éviter :\nUtilisation cohérente des espaces ou des tabulations : Choisir entre espaces et tabulations et s’y tenir tout au long du code. Configuration de l’éditeur : Configurer l’éditeur de texte pour afficher les caractères d’espacement et utiliser l’indentation automatique. 3. Conditions mal formulées Erreurs courantes :\nUtilisation incorrecte des opérateurs de comparaison : Confondre = et == ou utiliser des opérateurs incorrects. if a = 5: # SyntaxError # Code Astuces pour les éviter :\nRelecture du code : Vérifier que les opérateurs de comparaison sont utilisés correctement. Tests unitaires : Écrire des tests pour vérifier que les conditions fonctionnent comme prévu. 4. Oublier les cas elif et else Erreurs courantes :\nOublier de couvrir tous les cas possibles : Ne pas inclure de conditions elif ou else peut entraîner des comportements inattendus. if a \u003e 0: print(\"Positif\") elif a \u003c 0: print(\"Négatif\") # Que se passe-t-il si a == 0 ? Astuces pour les éviter :\nUtilisation de else : Toujours inclure une clause else pour couvrir les cas non spécifiés. if a \u003e 0: print(\"Positif\") elif a \u003c 0: print(\"Négatif\") else: print(\"Zéro\") 5. Conditions redondantes ou contradictoires Erreurs courantes :\nConditions redondantes : Vérifier la même condition plusieurs fois ou inclure des conditions qui se contredisent. if a \u003e 0: print(\"Positif\") elif a \u003e 0: print(\"Toujours positif\") # Condition redondante Astuces pour les éviter :\nSimplification des conditions : Réduire les conditions redondantes et s’assurer qu’elles sont mutuellement exclusives. if a \u003e 0: print(\"Positif\") elif a \u003c 0: print(\"Négatif\") else: print(\"Zéro\")",
    "description": "Les erreurs communes avec les structures if, elif et else Les structures conditionnelles if, elif et else sont fondamentales en programmation pour contrôler le flux d’exécution du programme. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Voici les erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Erreurs de syntaxe Erreurs courantes :",
    "tags": [],
    "title": "Erreurs avec if elif et else",
    "uri": "/bases/langage-de-prog/erreurs/if-else-elif/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "Qu’est-ce qu’une fonction récursive ? Une fonction récursive est une fonction qui s’appelle elle-même. Pour qu’une fonction récursive fonctionne correctement, elle doit avoir deux éléments essentiels :\nUn cas de base : Une condition qui arrête la récursion. Un appel récursif : La fonction s’appelle elle-même avec des arguments modifiés. Exemple simple : La factorielle d’un nombre Calculer la factorielle d’un nombre est un exemple classique de récursion. La factorielle de n (notée n!) est le produit de tous les entiers de 1 à n.\nVoici comment on peut définir la factorielle de manière récursive :\nLa factorielle de 0 est 1 (cas de base). La factorielle de n est n multiplié par la factorielle de n-1 (appel récursif). def factorielle(n): if n == 0: return 1 # Cas de base else: return n * factorielle(n - 1) # Appel récursif # Exemples d'utilisation print(factorielle(5)) # Affiche 120 Comment fonctionne la récursion ? Pour comprendre comment fonctionne la récursion, examinons l’exemple de la factorielle de 3 (3!).\nfactorielle(3) appelle factorielle(2). factorielle(2) appelle factorielle(1). factorielle(1) appelle factorielle(0). factorielle(0) retourne 1 (cas de base). factorielle(1) retourne 1 * 1 = 1. factorielle(2) retourne 2 * 1 = 2. factorielle(3) retourne 3 * 2 = 6. Exemple : La suite de Fibonacci La suite de Fibonacci est une autre application classique de la récursion. Chaque nombre de la suite est la somme des deux précédents.\ndef fibonacci(n): if n \u003c= 1: return n # Cas de base else: return fibonacci(n - 1) + fibonacci(n - 2) # Appel récursif # Exemples d'utilisation print(fibonacci(6)) # Affiche 8 Avantages et inconvénients de la récursion Avantages :\nSimplicité : Les fonctions récursives peuvent être plus simples et plus élégantes que leurs équivalents itératifs. Décomposition naturelle : Elles permettent de décomposer naturellement un problème en sous-problèmes similaires. Inconvénients :\nPerformance : Les fonctions récursives peuvent être moins efficaces en termes de temps et d’espace mémoire, surtout si elles ne sont pas optimisées. Limite de récursion : Python a une limite sur la profondeur de récursion, ce qui peut poser problème pour des entrées très grandes.",
    "description": "Qu’est-ce qu’une fonction récursive ? Une fonction récursive est une fonction qui s’appelle elle-même. Pour qu’une fonction récursive fonctionne correctement, elle doit avoir deux éléments essentiels :\nUn cas de base : Une condition qui arrête la récursion. Un appel récursif : La fonction s’appelle elle-même avec des arguments modifiés. Exemple simple : La factorielle d’un nombre Calculer la factorielle d’un nombre est un exemple classique de récursion. La factorielle de n (notée n!) est le produit de tous les entiers de 1 à n.",
    "tags": [],
    "title": "Les fonctions récursives",
    "uri": "/bases/langage-de-prog/fonction-recursive/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes avec la boucle while La boucle while est une structure de contrôle essentielle en Python, permettant d’exécuter un bloc de code tant qu’une condition est vraie. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Voyons les erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Boucles infinies Erreurs courantes :\nCondition toujours vraie : Si la condition de la boucle while reste toujours vraie, la boucle ne se termine jamais, créant une boucle infinie. while True: print(\"Boucle infinie\") Astuces pour les éviter :\nMise à jour de la condition : Assurez-vous que la condition de la boucle peut devenir fausse. i = 0 while i \u003c 10: print(i) i += 1 Utilisation de break : Utilisez l’instruction break pour sortir de la boucle si une certaine condition est remplie. while True: response = input(\"Voulez-vous continuer ? (oui/non) : \") if response == \"non\": break 2. Conditions mal formulées Erreurs courantes :\nConditions incorrectes : Utiliser des conditions mal formulées peut entraîner des boucles infinies ou des boucles qui ne s’exécutent jamais. i = 10 while i \u003e 0: print(i) i -= 1 Astuces pour les éviter :\nTests unitaires : Écrire des tests pour vérifier que la condition de la boucle fonctionne comme prévu. Débogage : Utiliser des outils de débogage pour suivre l’exécution de la boucle et vérifier les valeurs des variables. 3. Mauvaise gestion des variables Erreurs courantes :\nVariables non initialisées : Oublier d’initialiser les variables utilisées dans la condition de la boucle peut causer des erreurs. while i \u003c 10: print(i) i += 1 # NameError: name 'i' is not defined Astuces pour les éviter :\nInitialisation des variables : Toujours initialiser les variables avant de les utiliser dans la condition de la boucle. i = 0 while i \u003c 10: print(i) i += 1 4. Boucles imbriquées Erreurs courantes :\nComplexité accrue : Les boucles while imbriquées peuvent rendre le code difficile à lire et à déboguer. i = 0 while i \u003c 3: j = 0 while j \u003c 3: print(i, j) j += 1 i += 1 Astuces pour les éviter :\nSimplification du code : Réduire l’imbrication des boucles en utilisant des fonctions ou des structures de données appropriées. for i in range(3): for j in range(3): print(i, j) 5. Utilisation incorrecte de continue Erreurs courantes :\nSaut de code important : Utiliser continue de manière incorrecte peut entraîner le saut de code important dans la boucle. i = 0 while i \u003c 10: i += 1 if i % 2 == 0: continue print(i) # Ne s'exécute que pour les valeurs impaires de i Astuces pour les éviter :\nRelecture du code : Vérifier que l’utilisation de continue n’entraîne pas le saut de code important. Utilisation de commentaires : Ajouter des commentaires pour expliquer pourquoi continue est utilisé et ce qu’il doit accomplir.",
    "description": "Les erreurs communes avec la boucle while La boucle while est une structure de contrôle essentielle en Python, permettant d’exécuter un bloc de code tant qu’une condition est vraie. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Voyons les erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Boucles infinies Erreurs courantes :",
    "tags": [],
    "title": "Erreurs avec la boucle while",
    "uri": "/bases/langage-de-prog/erreurs/while/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "Les listes dans les listes Une liste peut comporter tout type d’élément. Nous pouvons donc mettre des listes dans des listes. Nous parlons alors de listes (ou tableaux) à 2 dimensions.\n# Liste contenant 3 éléments # Chaque élément est une liste contenant 2 nombres matrice = [[1, 2], [3, 4], [5, 6]] Pour parcourir toutes les listes, il suffit de mettre une boucle dans une boucle :\n# On parcourt chaque éléments de la liste principale for sous_liste in matrice: # et ensuite chaque élément de la \"sous-liste\" for element in sous_liste: print(element) Les opérations vues sur les listes en 1 dimension fonctionnent aussi pour les listes en 2D:\nprint(matrice[0]) # affiche la première liste de la matrice print(matrice[0][1]) # affiche le 2e élément de la première liste de la matrice matrice.append([7, 8]) # ajoute une nouvelle liste à la matrice Comme nous l’avons vu plus haut, la fonction range() peut aussi être utilisé pour parcourir les listes à 2 dimensions :\n# On ajoute 1 à chaque élément de la matrice for i in range(len(matrice)): for j in range(len(matrice[i])): matrice[i][j] += 1",
    "description": "Les listes dans les listes Une liste peut comporter tout type d’élément. Nous pouvons donc mettre des listes dans des listes. Nous parlons alors de listes (ou tableaux) à 2 dimensions.\n# Liste contenant 3 éléments # Chaque élément est une liste contenant 2 nombres matrice = [[1, 2], [3, 4], [5, 6]] Pour parcourir toutes les listes, il suffit de mettre une boucle dans une boucle :",
    "tags": [],
    "title": "Les listes de listes",
    "uri": "/bases/langage-de-prog/listes-de-listes/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes avec la boucle for et la fonction range() La boucle for et la fonction range() sont des outils puissants en Python pour itérer sur des séquences. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Explorons les erreurs courantes et des astuces pour les éviter et les détecter facilement.\n1. Erreurs de syntaxe avec range() Erreurs courantes :\nOublier les parenthèses : La fonction range() nécessite des parenthèses pour fonctionner correctement. for i in range 10: # SyntaxError print(i) Astuces pour les éviter :\nRelecture du code : Toujours vérifier que range() est utilisé avec des parenthèses. for i in range(10): print(i) 2. Mauvaise utilisation des arguments de range() Erreurs courantes :\nArguments incorrects : Utiliser des arguments incorrects ou dans le mauvais ordre peut causer des erreurs. for i in range(10, 1): # Ne produit aucune itération print(i) Astuces pour les éviter :\nCompréhension des arguments : range(start, stop, step) où start est inclusif, stop est exclusif, et step est l’incrément. for i in range(1, 10, 2): print(i) # Affiche 1, 3, 5, 7, 9 3. Boucles infinies avec range() Erreurs courantes :\nIncrément incorrect : Utiliser un incrément incorrect peut causer des boucles infinies ou des itérations inattendues. for i in range(10, 0, -1): print(i) # Affiche 10, 9, 8, ..., 1 Astuces pour les éviter :\nVérification des arguments : S’assurer que l’incrément est cohérent avec les valeurs de début et de fin. for i in range(10, 0, -1): print(i) # Affiche 10, 9, 8, ..., 1 4. Modification de la séquence pendant l’itération Erreurs courantes :\nModification de la liste : Modifier une liste pendant son itération peut causer des comportements inattendus. numbers = [1, 2, 3, 4, 5] for num in numbers: if num % 2 == 0: numbers.remove(num) print(numbers) # Résultat inattendu Astuces pour les éviter :\nItération sur une copie : Itérer sur une copie de la liste pour éviter les modifications pendant l’itération. numbers = [1, 2, 3, 4, 5] for num in numbers[:]: if num % 2 == 0: numbers.remove(num) print(numbers) # Affiche [1, 3, 5] 5. Utilisation incorrecte de enumerate() Erreurs courantes :\nMauvaise gestion des indices : Utiliser enumerate() sans comprendre son fonctionnement peut causer des erreurs. fruits = [\"pomme\", \"banane\", \"cerise\"] for fruit in enumerate(fruits): print(fruit) # Affiche (0, 'pomme'), (1, 'banane'), (2, 'cerise') Astuces pour les éviter :\nDéballage des tuples : Utiliser le déballage des tuples pour accéder aux indices et aux valeurs. fruits = [\"pomme\", \"banane\", \"cerise\"] for index, fruit in enumerate(fruits): print(index, fruit) # Affiche 0 pomme, 1 banane, 2 cerise",
    "description": "Les erreurs communes avec la boucle for et la fonction range() La boucle for et la fonction range() sont des outils puissants en Python pour itérer sur des séquences. Cependant, des erreurs peuvent survenir, surtout pour les débutants. Explorons les erreurs courantes et des astuces pour les éviter et les détecter facilement.",
    "tags": [],
    "title": "Erreurs avec la boucle for et la fonction range",
    "uri": "/bases/langage-de-prog/erreurs/for-range/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "L’instruction MATCH-CASE L’instruction match-case est inspirée des structures de correspondance de motifs (switch-case) présentes dans d’autres langages de programmation. Elle permet généralement de simplifier le traitement de différentes conditions en rendant le code plus lisible et plus structuré. Syntaxe de base Astuce La syntaxe de l’instruction match-case est similaire à celle d’une série de conditions if-elif-else, mais elle est souvent plus concise et expressive.\nSyntaxe générale:\ndef action(commande): match commande: case \"demarre\": print(\"Démarrage...\") case \"stop\": print(\"Arrêt...\") case \"pause\": print(\"Pause...\") case _: print(\"Commande inconnue\") Dans cet exemple, la fonction action utilise match pour comparer la variable commande à différents motifs (“demarre”, “stop”, “pause”). Si aucun motif ne correspond, le cas par défaut (_) est exécuté. Voici deux exemples concrets simples:\nExemple 1: Sélection de fruit:\ndef selectionner_fruit(fruit): match fruit: case \"pomme\": return \"C'est une pomme\" case \"banane\": return \"C'est une banane\" case \"cerise\": return \"C'est une cerise\" case _: return \"Fruit inconnu\" # Exemple d'utilisation print(selectionner_fruit(\"pomme\")) # C'est une pomme print(selectionner_fruit(\"kiwi\")) # Fruit inconnu Explication:\nmatch fruit:\nCompare la valeur de la variable fruit à différents motifs. case \"pomme\"\nVérifie si fruit est égal à \"pomme\". Si fruit correspond à “pomme”, le code suivant return \"C'est une pomme\" est exécuté. case \"banane\"\nVérifie si fruit est égal à \"banane\". Si fruit correspond à “banane”, le code suivant return \"C'est une banane\" est exécuté. case \"cerise\"\nVérifie si fruit est égal à \"cerise\". Si fruit correspond à “cerise”, le code suivant return \"C'est une cerise\" est exécuté. case _:\nLe symbole _ est un motif générique qui correspond à n’importe quelle valeur qui n’a pas été capturée par les motifs précédents. return \"Fruit inconnu\" : Si fruit ne correspond à aucun des motifs précédents, la fonction retourne \"Fruit inconnu\". Exemple 2: Classification d’animaux en fonction de leur type :\ndef classifier(animal): match animal: case \"chien\" | \"chat\" | \"lapin\": return \"Mammifère\" case \"aigle\" | \"canari\" | \"perroquet\": return \"Oiseau\" case \"serpent\" | \"lézard\" | \"tortue\": return \"Reptile\" case _: return \"Inconnu\" # Exemple d'utilisation animal = \"chat\" print(f\"{animal} est un {classifier(animal)}.\") # chat est une Mammifère Explication:\nmatch animal:\nCompare la valeur de la variable animal à différents motifs. case \"chien\" | \"chat\" | \"lapin\":\nVérifie si animal est égal à \"chien\", \"chat\" ou \"lapin\". Le symbole | signifie “ou”. Si animal correspond à l’un de ces trois mots, le code suivant est exécuté. return \"Mammifère\" : Si animal est \"chien\", \"chat\" ou \"lapin\", la fonction retourne la chaîne de caractères \"Mammifère\". case \"aigle\" | \"canari\" | \"perroquet\":\nVérifie si animal est égal à \"aigle\", \"canari\" ou \"perroquet\". return \"Oiseau\" : Si animal est l’un de ces trois mots, la fonction retourne \"Oiseau\". case \"serpent\" | \"lézard\" | \"tortue\":\nVérifie si animal est égal à \"serpent\", \"lézard\" ou \"tortue\". return \"Reptile\" : Si animal est l’un de ces trois mots, la fonction retourne \"Reptile\". case _:\nLe symbole _ est un motif générique qui correspond à n’importe quelle valeur qui n’a pas été capturée par les motifs précédents. return \"Inconnu\" : Si animal ne correspond à aucun des motifs précédents, la fonction retourne \"Inconnu\". Exemple de IF-ELIF-ELSE avec MATCH-CASE Soit l’exemple suivant vu précédemment. Re-écrivons-le avec match-case:\nage = 36 if 18 \u003c= age \u003c= 30: print(\"Vous êtes un jeune adulte\") elif 30 \u003c age \u003c 65: print(\"Avez-vous des enfants?\") elif age \u003e= 65: print(\"Bonne retraite!\") else: print(\"Vous êtes mineur\") Voici le même algorithme, mais avec match-case:\nage = 36 match age: case age if 18 \u003c= age \u003c= 30: print(\"Vous êtes un jeune adulte\") case age if 30 \u003c age \u003c 65: print(\"Avez-vous des enfants?\") case age if age \u003e= 65: print(\"Bonne retraite!\") case _: print(\"Vous êtes mineur\") Info Comme vous pouvez le voir, le code n’est pas vraiment plus simple. Dans ce cours, nous utiliserons principalement if-elif-else. Ceci dit, lorsque les directives ne vous obligent pas à utiliser if-elif-else, l’instruction match-case sera acceptée.",
    "description": "L’instruction MATCH-CASE L’instruction match-case est inspirée des structures de correspondance de motifs (switch-case) présentes dans d’autres langages de programmation. Elle permet généralement de simplifier le traitement de différentes conditions en rendant le code plus lisible et plus structuré. Syntaxe de base Astuce La syntaxe de l’instruction match-case est similaire à celle d’une série de conditions if-elif-else, mais elle est souvent plus concise et expressive.",
    "tags": [],
    "title": "Match Case",
    "uri": "/bases/langage-de-prog/match-case/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les erreurs communes avec les listes Les listes sont l’une des structures de données les plus utilisées en Python. Cependant, leur utilisation peut parfois mener à des erreurs courantes. Voici un aperçu de ces erreurs et des astuces pour les éviter ou les détecter facilement.\n1. IndexError : Liste hors limites Erreur :\nmy_list = [1, 2, 3] print(my_list[3]) # IndexError: list index out of range Astuce : Toujours vérifier la longueur de la liste avant d’accéder à un index.\nif index \u003c len(my_list): print(my_list[index]) else: print(\"Index hors limites\") 2. TypeError : Mélange de types Erreur :\nmy_list = [1, 'two', 3] total = sum(my_list) # TypeError: unsupported operand type(s) for +: 'int' and 'str' Astuce : Utiliser des listes homogènes ou convertir les types avant les opérations.\nmy_list = [1, 2, 3] total = sum(my_list) # Correct 3. Modification de la liste pendant l’itération Erreur :\nmy_list = [1, 2, 3, 4] for item in my_list: if item % 2 == 0: my_list.remove(item) # Cela peut causer des éléments manquants Astuce : Itérer sur une copie de la liste ou utiliser une compréhension de liste.\n# Itérer sur une copie for item in my_list[:]: if item % 2 == 0: my_list.remove(item) # Utiliser une compréhension de liste my_list = [item for item in my_list if item % 2 != 0] 4. Utilisation incorrecte de append et extend Erreur :\nmy_list = [1, 2, 3] my_list.append([4, 5]) # Résultat : [1, 2, 3, [4, 5]] Astuce : Utiliser extend pour ajouter plusieurs éléments.\nmy_list = [1, 2, 3] my_list.extend([4, 5]) # Résultat : [1, 2, 3, 4, 5] 5. Confusion entre copy et deepcopy Erreur :\nimport copy my_list = [[1, 2], [3, 4]] new_list = copy.copy(my_list) new_list[0][0] = 9 # Modifie aussi my_list Astuce : Utiliser deepcopy pour copier des listes imbriquées.\nnew_list = copy.deepcopy(my_list) new_list[0][0] = 9 # Ne modifie pas my_list",
    "description": "Les erreurs communes avec les listes Les listes sont l’une des structures de données les plus utilisées en Python. Cependant, leur utilisation peut parfois mener à des erreurs courantes. Voici un aperçu de ces erreurs et des astuces pour les éviter ou les détecter facilement.\n1. IndexError : Liste hors limites Erreur :",
    "tags": [],
    "title": "Erreurs avec les listes",
    "uri": "/bases/langage-de-prog/erreurs/listes/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "Les fonctions sont des blocs de code essentiels en Python, mais leur utilisation peut parfois entraîner des erreurs, surtout pour les débutants. Voici un aperçu des erreurs les plus courantes et des conseils pour les éviter.\n1. Oublier de définir la fonction avant de l’appeler En Python, une fonction doit être définie avant d’être appelée. Si vous essayez d’appeler une fonction avant sa définition, vous obtiendrez une erreur NameError.\n# Mauvais exemple resultat = addition(5, 3) def addition(a, b): return a + b Solution : Toujours définir la fonction avant de l’appeler.\n# Bon exemple def addition(a, b): return a + b resultat = addition(5, 3) 2. Mauvaise utilisation des arguments Les erreurs liées aux arguments incluent l’oubli de passer les arguments nécessaires ou le passage d’un nombre incorrect d’arguments.\ndef addition(a, b): return a + b # Mauvais exemple resultat = addition(5) # TypeError: missing 1 required positional argument: 'b' Solution : Vérifiez toujours que vous passez le bon nombre d’arguments.\n# Bon exemple resultat = addition(5, 3) 3. Utilisation incorrecte des variables globales et locales Confondre les variables globales et locales peut entraîner des comportements inattendus.\na = 10 def addition(b): return a + b # Mauvais exemple print(addition(5)) # Fonctionne, mais peut être source de confusion Solution : Utilisez des variables locales autant que possible et évitez de modifier les variables globales à l’intérieur des fonctions.\ndef addition(a, b): return a + b a = 10 print(addition(a, 5)) 4. Oublier de retourner une valeur Une fonction qui ne retourne pas explicitement une valeur retourne None par défaut.\ndef addition(a, b): somme = a + b # Mauvais exemple resultat = addition(5, 3) print(resultat) # Affiche None Solution : Assurez-vous de retourner une valeur si nécessaire.\n# Bon exemple def addition(a, b): return a + b resultat = addition(5, 3) print(resultat) # Affiche 8 5. Ne pas gérer les exceptions Les fonctions peuvent échouer pour diverses raisons, et ne pas gérer ces exceptions peut rendre le débogage difficile.\ndef division(a, b): return a / b # Mauvais exemple resultat = division(5, 0) # ZeroDivisionError: division by zero Solution : Utilisez des blocs try et except pour gérer les exceptions.\n# Bon exemple def division(a, b): try: return a / b except ZeroDivisionError: return \"Erreur : division par zéro\" resultat = division(5, 0) print(resultat) # Affiche \"Erreur : division par zéro\"",
    "description": "Les fonctions sont des blocs de code essentiels en Python, mais leur utilisation peut parfois entraîner des erreurs, surtout pour les débutants. Voici un aperçu des erreurs les plus courantes et des conseils pour les éviter.\n1. Oublier de définir la fonction avant de l’appeler En Python, une fonction doit être définie avant d’être appelée. Si vous essayez d’appeler une fonction avant sa définition, vous obtiendrez une erreur NameError.",
    "tags": [],
    "title": "Erreurs avec les fonctions",
    "uri": "/bases/langage-de-prog/erreurs/fonctions/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation",
    "content": "Qu’est-ce que pandas? Pandas est une bibliothèque Python utilisée pour la manipulation et l’analyse de données. Elle est particulièrement utile pour traiter de grandes quantités de données expérimentales.\nCe cours couvre les concepts de base de Pandas, en mettant l’accent sur les applications pratiques dans les sciences.\nInstallation de Pandas Avant de commencer, assurez vous d’avoir Pandas installé. Vous pouvez l’installer via pip :\npip install pandas Étape obligatoire pour utiliser Pandas Pour commencer, vous devez l’importer dans votre code.\nimport pandas as pd Pour vérifier que Pandas est bien installé sur votre environnement :\n# Version de Pandas pd.__version__ Structures de données de base Les Series Une Series est une structure de données unidimensionnelle semblable à une liste. Elle peut contenir des données de tout type (entiers, flottants, chaînes, etc.).\nCréation d’une série et accès à ses éléments import pandas as pd # Création d'une Series ma_serie = pd.Series([1, 2, 3, 4, 5]) print(f\"La série:\\n{ma_serie}\") # Accès par position print(f\"Premier élément: {ma_serie[0]}\") # La donnée en première position Affiche:\nLa série: 0 1 1 2 2 3 3 4 4 5 dtype: int64 Premier élément: 1 Les DataFrames Un DataFrame est une structure de données bidimensionnelle avec des étiquettes de lignes et de colonnes. C’est l’équivalent d’une feuille de calcul comme Excel.\nCréation d’un DataFrame # Création d'un DataFrame donnee = { \"Nom\": [\"Aline\", \"Robert\", \"Charles\"], \"Âge\": [25, 30, 35], \"Note\": [85.5, 90.3, 78.9] } df = pd.DataFrame(donnee) print(df) Affiche:\nNom Âge Note 0 Aline 25 85.5 1 Robert 30 90.3 2 Charles 35 78.9 Création d’un Dataframe à partir d’une Serie La méthode to_frame() permet de transformer une série en un DataFrame avec une seule colonne. Cela peut être utile lorsque vous souhaitez appliquer des opérations ou des méthodes spécifiques aux DataFrames sur une série.\nimport pandas as pd # Création d'une série ma_serie = pd.Series([1, 2, 3, 4, 5], name='Valeurs') # Conversion de la série en DataFrame df = ma_serie.to_frame() # Affichage du DataFrame print(df) Affiche:\nValeurs 0 1 1 2 2 3 3 4 4 5 Dans cet exemple, ma_serie est convertie en un DataFrame df avec une seule colonne nommée “Valeurs”.\nAccès aux colonnes et aux lignes d’un DataFrame Les méthodes df.loc et df.iloc de pandas sont utilisées pour accéder aux données dans un DataFrame, mais elles fonctionnent de manière différente :\ndf.loc : est basée sur les noms des lignes et des colonnes pour sélectionner les données. Par exemple :\ndf.loc['nom_ligne', 'nom_colonne'] Avantages : Plus intuitif lorsque vous travaillez avec des étiquettes de lignes et de colonnes. Inconvénients : Peut être plus lent que iloc pour de grandes quantités de données. df.iloc : est basée sur les indices numériques des lignes et des colonnes pour sélectionner les données. Par exemple :\ndf.iloc[0, 1] Avantages : Plus rapide et utile pour des opérations basées sur des positions. Inconvénients : Moins intuitif si vous ne connaissez pas les positions exactes des lignes et des colonnes¹². En résumé, utilisez loc lorsque vous travaillez avec des étiquettes et iloc lorsque vous travaillez avec des indice (nombres entiers).\nExemples:\nimport pandas as pd # Création du dataframe donnee = { 'Nom': ['Aline', 'Robert', 'Charles'], 'Âge': [25, 30, 35], 'Note': [85.5, 90.3, 78.9] } df = pd.DataFrame(donnee) print(f\"Le dataframe \\n{df}\") print() # Utilisation de df.loc # Sélection de la ligne avec l'index 1 (Robert) ligne_loc = df.loc[1] print(\"Utilisation de df.loc pour sélectionner la ligne avec l'index 1:\") print(ligne_loc) # Sélection des lignes avec les index 0 et 2 (Aline et Charles) lignes_loc = df.loc[[0, 2]] print(\"\\nUtilisation de df.loc pour sélectionner les lignes avec les index 0 et 2:\") print(lignes_loc) # Utilisation de df.iloc # Sélection de la ligne à la position 1 (Robert) ligne_iloc = df.iloc[1] print(\"\\nUtilisation de df.iloc pour sélectionner la ligne à la position 1:\") print(ligne_iloc) # Sélection des lignes aux positions 0 et 2 (Aline et Charles) lignes_iloc = df.iloc[[0, 2]] print(\"\\nUtilisation de df.iloc pour sélectionner les lignes aux positions 0 et 2:\") print(lignes_iloc) Voici ce que fait chaque partie du code :\ndf.loc[1] sélectionne la ligne avec l’index 1, c’est-à-dire la ligne correspondant à Robert. df.loc[[0, 2]] sélectionne les lignes avec les index 0 et 2, c’est-à-dire les lignes correspondant à Aline et Charles. df.iloc[1] sélectionne la ligne à la position 1, c’est-à-dire la ligne correspondant à Robert. df.iloc[[0, 2]] sélectionne les lignes aux positions 0 et 2, c’est-à-dire les lignes correspondant à Aline et Charles. Affiche :\nLe dataframe Nom Âge Note 0 Aline 25 85.5 1 Robert 30 90.3 2 Charles 35 78.9 Utilisation de df.loc pour sélectionner la ligne avec l'index 1: Nom Robert Âge 30 Note 90.3 Name: 1, dtype: object Utilisation de df.loc pour sélectionner les lignes avec les index 0 et 2: Nom Âge Note 0 Aline 25 85.5 2 Charles 35 78.9 Utilisation de df.iloc pour sélectionner la ligne à la position 1: Nom Robert Âge 30 Note 90.3 Name: 1, dtype: object Utilisation de df.iloc pour sélectionner les lignes aux positions 0 et 2: Nom Âge Note 0 Aline 25 85.5 2 Charles 35 78.9 Ajout et suppression de colonnes Vous pouvez facilement ajouter ou supprimer des colonnes dans un DataFrame.\nimport pandas as pd donnee = { 'Nom': ['Aline', 'Robert', 'Charles'], 'Âge': [25, 30, 35], 'Note': [85.5, 90.3, 78.9] } df = pd.DataFrame(donnee) # Ajout d'une nouvelle colonne df[\"Session\"] = \"Automne\" print(f\"La colonne Session ajoutée \\n{df}\\n\") # Suppression d'une colonne df = df.drop(columns=[\"Session\"]) print(f\"La colonne Session supprimée \\n{df}\\n\") Affiche:\nLa colonne Session ajoutée Nom Âge Note Session 0 Aline 25 85.5 Automne 1 Robert 30 90.3 Automne 2 Charles 35 78.9 Automne La colonne Session supprimée Nom Âge Note 0 Aline 25 85.5 1 Robert 30 90.3 2 Charles 35 78.9 Renommage de colonnes Les colonnes peuvent être renommées pour une meilleure clarté.\n# Renommage des colonnes df = df.rename(columns={\"Nom\": \"Prénom\"}) print(f\"La colonne Nom modifiée \\n{df}\\n\") Affiche:\nLa colonne Nom modifiée Prénom Âge Note 0 Aline 25 85.5 1 Robert 30 90.3 2 Charles 35 78.9 Tri d’un DataFrame Supposons que nous ayons un DataFrame df que nous voulons trier par la colonne âge.\nimport pandas as pd # Création du DataFrame df = pd.DataFrame({ 'Nom': ['Aline', 'Robert', 'Charles'], 'Âge': [25, 30, 35], }) # Tri du DataFrame par la colonne 'âge' df_trie = df.sort_values(by='Âge') print(df_trie) Dans cet exemple, nous avons un DataFrame df avec deux colonnes : Nom et Âge. La fonction sort_values() pour trier le DataFrame par la colonne âge. Le paramètre by='âge' indique la colonne sur laquelle nous voulons effectuer le tri.\nAffiche:\nnom âge 2 Charles 20 0 Aline 25 1 Robert 30 Fusion de Dataframes Supposons que nous ayons deux DataFrames, df1 et df2, que nous voulons fusionner sur une colonne commune appelée id.\nimport pandas as pd # Création des DataFrames df1 = pd.DataFrame({ 'id': [1, 2, 3], 'prénom': ['Aline', 'Robert', 'Charles'] }) df2 = pd.DataFrame({ 'id': [1, 2, 4], 'âge': [25, 30, 35] }) # Fusion des DataFrames sur la colonne 'id' df_fusionne = pd.merge(df1, df2, on='id', how='inner') print(df_fusionne) Dans cet exemple, nous avons deux DataFrames df1 et df2. Nous utilisons la fonction merge() pour les fusionner sur la colonne id. Le paramètre how='inner' indique que nous voulons une jointure interne, ce qui signifie que seules les lignes avec des valeurs correspondantes dans les deux DataFrames seront incluses dans le résultat final.\nAffiche:\nid prénom âge 0 1 Aline 25 1 2 Robert 30 Gestion des données de type date Travailler avec des données temporelles est essentiel dans de nombreuses disciplines scientifiques. Pandas rend cette tâche beaucoup plus simple en fournissant des outils pour manipuler et analyser les dates.\nConversion des chaînes de caractères en dates Lorsque vous chargez des données, les dates peuvent être sous forme de chaînes de caractères. La première étape consiste donc à les convertir type datetime.\nimport pandas as pd # Chargement des données donnees_date = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'], 'Température': [20, 21, 19]} df = pd.DataFrame(donnees_date) # Conversion en datetime df['Date'] = pd.to_datetime(df['Date']) print(df) Affiche:\nDate Température 0 2024-01-01 20 1 2024-01-02 21 2 2024-01-03 19 Extraction des composants de la date Une fois les dates converties en datetime, vous pouvez extraire facilement des composants spécifiques comme l’année, le mois ou le jour.\n# Extraction de l'année df['Année'] = df['Date'].dt.year # Extraction du mois df['Mois'] = df['Date'].dt.month # Extraction du jour df['Jour'] = df['Date'].dt.day print(df) Affiche:\nDate Température Année Mois Jour 0 2024-01-01 20 2024 1 1 1 2024-01-02 21 2024 1 2 2 2024-01-03 19 2024 1 3 Manipulation des dates Pandas permet aussi de faire des manipulations temporelles comme le filtrage par date, l’ajout de jours ou la création de plages de dates.\nFiltrage par date # Filtrage pour obtenir les données de janvier 2024 masque = (df['Date'] \u003e= '2024-01-01') \u0026 (df['Date'] \u003c= '2024-01-31') donnee_janvier = df.loc[masque] print(donnee_janvier) Affiche:\nDate Température 0 2024-01-01 20 1 2024-01-02 21 2 2024-01-03 19 Ajout de jours # Ajout de 5 jours à chaque date df['Date plus 5'] = df['Date'] + pd.Timedelta(days=5) print(df) Affiche:\nDate Température Date plus 5 0 2024-01-01 20 2024-01-06 1 2024-01-02 21 2024-01-07 2 2024-01-03 19 2024-01-08 Création d’une plage de dates # Création d'une plage de dates (D = Day) plage_date = pd.date_range(start='2024-01-01', end='2024-01-10', freq='D') print(plage_date) Affiche:\nDatetimeIndex(['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05', '2024-01-06', '2024-01-07', '2024-01-08', '2024-01-09', '2024-01-10'], dtype='datetime64[ns]', freq='D') Exemple complet import pandas as pd # Données data = {'Date': ['2024-01-01', '2024-01-02', '2024-01-03'], 'Température': [20, 21, 19]} df = pd.DataFrame(data) # Conversion en datetime df['Date'] = pd.to_datetime(df['Date']) # Extraction des composants de la date df['Année'] = df['Date'].dt.year df['Mois'] = df['Date'].dt.month df['Jour'] = df['Date'].dt.day # Filtrage par date masque = (df['Date'] \u003e= '2024-01-01') \u0026 (df['Date'] \u003c= '2024-01-31') donnees_janvier = df.loc[masque] # Ajout de jours df['Date plus 5'] = df['Date'] + pd.Timedelta(days=5) # Création d'une plage de dates plage_date = pd.date_range(start='2024-01-01', end='2024-01-10', freq='D') print(f\"Le dataframe \\n{df}\\n\") print(f\"Les données du mois de janvier \\n{donnees_janvier}\\n\") print(f\"La plage de dates du 1er au 10 janvier 2024 \\n{plage_date}\\n\") Affiche:\nLe dataframe Date Température Année Mois Jour Date plus 5 0 2024-01-01 20 2024 1 1 2024-01-06 1 2024-01-02 21 2024 1 2 2024-01-07 2 2024-01-03 19 2024 1 3 2024-01-08 Les données du mois de janvier Date Température Année Mois Jour 0 2024-01-01 20 2024 1 1 1 2024-01-02 21 2024 1 2 2 2024-01-03 19 2024 1 3 La plage de dates du 1er au 10 janvier 2024 DatetimeIndex(['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05', '2024-01-06', '2024-01-07', '2024-01-08', '2024-01-09', '2024-01-10'], dtype='datetime64[ns]', freq='D') Utilisation de fichiers de données Le traitement des fichiers contenant des données est essentiel en programmation Python, en particulier dans le domaine des sciences de données.\nIntroduction aux fichiers CSV CSV signifie Comma-Separated Values (valeurs séparées par des virgules). C’est un format de fichier simple utilisé pour stocker des données tabulaires, comme une feuille de calcul Excel.\nPandas fourni des fonctionnalités pour lire des fichiers csv ou en créer.\nImportation et exportation de données Lecture de fichiers CSV Pandas permet de les lire facilement. Le code suivant, permet de lire le contenu du fichier donnees.csv et d’afficher les premières lignes (par défaut 5). On peut préciser le nombre de ligne à afficher, en spécifiant une valeur dans head() par exemple df.head(12) affichera les 12 premières lignes du dataframe.\n# Lecture d'un fichier CSV df = pd.read_csv(\"donnees.csv\") print(df.head()) Écriture de fichiers CSV Vous pouvez également écrire des données dans un fichier CSV.\n# Écriture d'un DataFrame dans un fichier CSV df.to_csv(\"fichier.csv\", index=False) L’argument index=False est utilisé pour indiquer que vous ne souhaitez pas inclure l’index du dataframe dans le fichier CSV exporté. Par défaut, Pandas inclut l’index du dataframe comme première colonne dans le fichier CSV. En utilisant index=False, vous pouvez éviter cela.\nVoici un exemple pour illustrer :\nimport pandas as pd # Création du dataframe donnee = { 'Nom': ['Aline', 'Robert', 'Charles'], 'Âge': [25, 30, 35], 'Note': [85.5, 90.3, 78.9] } df = pd.DataFrame(donnee) # Exportation du dataframe en CSV sans l'index df.to_csv(\"fichier-sans-index.csv\", index=False) # Exportation du dataframe en CSV avec l'index (par défaut) df.to_csv(\"fichier-avec-index.csv\") Dans fichier_sans_index.csv, le fichier CSV n’aura pas de colonne d’index, tandis que dans fichier_avec_index.csv, la première colonne sera l’index du dataframe.\nFichier csv avec index\nFichier csv avec index\nFichier csv sans index\nFichier csv sans index\nManipulation de données Sélection et filtrage de données Vous pouvez sélectionner des colonnes spécifiques ou filtrer des lignes en fonction de conditions.\n# Sélection de colonnes ages = df['Âge'] print(f\"Les âges sont:\\n{ages}\\n\") # Filtrage de lignes df_filtre = df[df['Note'] \u003e 80] print(f\"Le dataframe contenant seulement les notes \u003e 80 \\n{df_filtre}\\n\") Affiche :\nLes âges sont: 0 25 1 30 2 35 Name: Âge, dtype: int64 Le dataframe contenant seulement les notes \u003e 80 Nom Âge Note 0 Aline 25 85.5 1 Robert 30 90.3 Gestion des valeurs manquantes Les données expérimentales peuvent souvent contenir des valeurs manquantes. Pandas offre des méthodes pour les gérer.\nRemplissage des valeurs manquantes:\ndf.fillna(0, inplace=True) Cette ligne remplace toutes les valeurs manquantes (NaN) dans le dataframe df par 0. L’argument inplace=True signifie que la modification est faite directement sur le dataframe df sans créer une nouvelle copie.\nSuppression des lignes avec des valeurs manquantes:\ndf.dropna(inplace=True) Cette ligne supprime toutes les lignes du dataframe df qui contiennent au moins une valeur manquante (NaN). Comme précédemment, inplace=True signifie que la modification est faite directement sur le dataframe df.\nSi inplace=False, les modifications ne sont pas appliquées directement au dataframe original. Au lieu de cela, une nouvelle copie du dataframe avec les modifications est retournée. Le dataframe original reste inchangé.\nAnalyse de données Statistiques descriptives Pandas fournit des méthodes pour calculer des statistiques descriptives rapidement.\n# Statistiques descriptives print(f\"Statistiques : \\n{df.describe()}\\n\") Affiche :\nStatistiques : Âge Note count 3.0 3.000000 mean 30.0 84.900000 std 5.0 5.723635 min 25.0 78.900000 25% 27.5 82.200000 50% 30.0 85.500000 75% 32.5 87.900000 max 35.0 90.300000 La méthode df.describe() fournit des statistiques descriptives pour les colonnes numériques d’un dataframe. Voici les informations qu’elle donne :\nStatistique Description count Le nombre de valeurs non manquantes mean La moyenne des valeurs std L’écart type, qui mesure la dispersion des valeurs par rapport à la moyenne min La valeur minimale 25% Le premier quartile (25ème percentile), qui est la valeur en dessous de laquelle se trouvent 25% des données 50% La médiane (50ème percentile), qui est la valeur en dessous de laquelle se trouvent 50% des données 75% Le troisième quartile (75ème percentile), qui est la valeur en dessous de laquelle se trouvent 75% des données max La valeur maximale Groupement et agrégation Le groupement et l’agrégation sont essentiels pour analyser des données catégorielles.\nimport pandas as pd # Création du DataFrame data = { 'Substance': ['Eau', 'Eau', 'Eau', 'Acide sulfurique', 'Acide sulfurique', 'Acide sulfurique', 'Sodium', 'Sodium', 'Sodium'], 'Concentration (mol/L)': [0.1, 0.2, 0.3, 1.0, 1.5, 2.0, 0.5, 0.7, 0.9], 'pH': [7.0, 7.1, 7.2, 1.0, 1.2, 1.5, 13.0, 13.2, 13.5], 'Température (°C)': [25, 25, 25, 20, 20, 20, 30, 30, 30] } df = pd.DataFrame(data) # Affichage du DataFrame print(f\"Affichage des données \\n{df}\\n\") # Grouper par la colonne Substance et calcul de la moyenne des autres colonnes df_groupe = df.groupby(\"Substance\").mean() print(f\"Affichage des données groupées par substance \\n{df_groupe}\\n\") Affiche:\nAffichage des données Substance Concentration (mol/L) pH Température (°C) 0 Eau 0.1 7.0 25 1 Eau 0.2 7.1 25 2 Eau 0.3 7.2 25 3 Acide sulfurique 1.0 1.0 20 4 Acide sulfurique 1.5 1.2 20 5 Acide sulfurique 2.0 1.5 20 6 Sodium 0.5 13.0 30 7 Sodium 0.7 13.2 30 8 Sodium 0.9 13.5 30 Affichage de la moyenne des données groupées par substance Concentration (mol/L) pH Température (°C) Substance Acide sulfurique 1.5 1.233333 20.0 Eau 0.2 7.100000 25.0 Sodium 0.7 13.233333 30.0 Cas avertissement de FutureWarning Attention Si vous rencontrez un avertissement FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.*, vous devez soit spécifier explicitement numeric_only=True ou sélectionner uniquement les colonnes numériques avant d’appliquer la fonction mean()\nExemple:\ndonnee = { \"Nom\": [\"Aline\", \"Robert\", \"Charles\", \"Julie\"], \"Âge\": [25, 30, 35, 25], \"Note\": [85.5, 90.3, 78.9, 88.9] } df = pd.DataFrame(donnee) df_groupe = df.groupby(\"Âge\").mean(numeric_only=True) print(f\"Affichage de la moyenne des données groupées par âge \\n{df_groupe}\\n\") Affiche:\nAffichage de la moyenne des données groupées par âge Note Âge 25 87.2 30 90.3 35 78.9 Les attributs index et values des DataFrames et des Series .index : Définition : L’attribut .index d’un DataFrame ou d’une Series représente les étiquettes des lignes. Pour un DataFrame, il s’agit des étiquettes des lignes, et pour une Series, il s’agit des étiquettes des éléments. Utilisation : Il est souvent utilisé pour accéder ou manipuler les indices des données. Par exemple, dans une Series contenant des précipitations annuelles (Année, Précipitation), .index contiendrait les années. total_annee = df.groupby('Année')['Précipitation'].sum() print(total_annee.index) # Affiche les années .values : Définition : L’attribut .values d’un DataFrame ou d’une Series représente les données sous forme de tableau (numPy). Pour un DataFrame, il s’agit des valeurs de toutes les cellules, et pour une Series, il s’agit des valeurs des éléments. Utilisation : Il est utilisé pour accéder directement aux valeurs des données sans les étiquettes. Par exemple, dans une Series contenant des précipitations annuelles (Année, Précipitation), .values contiendrait les valeurs des précipitations. total_par_annee = df.groupby('Année')['Précipitation'].sum() print(total_par_annee.values) # Affiche les précipitations totales pour chaque année En résumé, .index vous donne les étiquettes des lignes (ou des éléments dans une Series), tandis que .values vous donne les valeurs des données.\nFonctions et méthodes Voici un tableau de quelques méthodes et fonctions incontournables en analyse de données scientifiques :\nMéthode/Fonction Description read_csv() Lire des fichiers CSV et les convertir en DataFrame head() Afficher les premières lignes d’un DataFrame describe() Fournir des statistiques descriptives pour les colonnes numériques d’un DataFrame info() Afficher un résumé concis du DataFrame, y compris le type de données et les valeurs manquantes groupby() Grouper les données par une ou plusieurs colonnes et appliquer des fonctions d’agrégation pivot_table() Créer des tableaux croisés dynamiques pour résumer les données plot() Générer des graphiques simples pour visualiser les données corr() Calculer la matrice de corrélation entre les colonnes numériques merge() Fusionner deux DataFrames sur une ou plusieurs colonnes clés dropna() Supprimer les lignes ou colonnes contenant des valeurs manquantes fillna() Remplace les lignes ou colonnes contenant des valeurs manquantes par une valeur donnée to_frame() Transforme une série en un DataFrame avec une seule colonne sort_values() Trie les valeurs d’une colonne d’un DataFrame Visualisation de données Bien que Pandas ne soit pas une bibliothèque de visualisation, il s’intègre bien avec Matplotlib pour créer des graphiques simples.\nInfo Nous verrons comment utiliser la bibliothèque Matplotlib pour tracer des graphiques, la semaine prochaine.\nPour tout savoir sur Pandas: Site officiel Pandas.",
    "description": "Qu’est-ce que pandas? Pandas est une bibliothèque Python utilisée pour la manipulation et l’analyse de données. Elle est particulièrement utile pour traiter de grandes quantités de données expérimentales.\nCe cours couvre les concepts de base de Pandas, en mettant l’accent sur les applications pratiques dans les sciences.\nInstallation de Pandas Avant de commencer, assurez vous d’avoir Pandas installé. Vous pouvez l’installer via pip :",
    "tags": [],
    "title": "Pandas (intermédiaire-avancé)",
    "uri": "/bases/langage-de-prog/pandas/pandas/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs :\nComprendre les bases de la programmation et l’environnement Python. Contenu :\nPrésentation du cours et des attentes. Présentation de l’environnement de développement. Syntaxe de base : variables, types de données, opérateurs. Utilisation des fonctions input et print pour l’interaction avec l’utilisateur. Activités : Exercices pratiques sur les variables, les types de données, et l’utilisation des fonctions input et print.",
    "description": "Objectifs :\nComprendre les bases de la programmation et l’environnement Python. Contenu :\nPrésentation du cours et des attentes. Présentation de l’environnement de développement. Syntaxe de base : variables, types de données, opérateurs. Utilisation des fonctions input et print pour l’interaction avec l’utilisateur. Activités : Exercices pratiques sur les variables, les types de données, et l’utilisation des fonctions input et print.",
    "tags": [],
    "title": "1. Introduction à Python et à la programmation",
    "uri": "/semaine1/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Régression Linéaire",
    "content": "Voici comment calculer une droite de régression linéaire en utilisant NumPy, une bibliothèque Python puissante pour les calculs numériques.\nÉtapes du calcul Importer NumPy : Tout d’abord, vous devez importer la bibliothèque NumPy.\nimport numpy as np Préparer les données : Vous devez avoir deux ensembles de données : les valeurs de la variable indépendante (x) et les valeurs de la variable dépendante (y).\nx = np.array([1, 2, 3, 4, 5]) y = np.array([2, 3, 5, 7, 11]) Calculer les coefficients de la croite de régression : Utilisez les formules de la régression linéaire pour calculer les coefficients a (pente) et b (ordonnée à l’origine).\n**Formule pour la pente a ** : $$ a = \\frac{n(\\sum xy) - (\\sum x)(\\sum y)}{n(\\sum x^2) - (\\sum x)^2} $$ **Formule pour l’ordonnée à l’origine b ** : $$ b = \\frac{(\\sum y) - a(\\sum x)}{n} $$ Voici comment les calculer avec NumPy :\nn = len(x) sum_x = np.sum(x) sum_y = np.sum(y) sum_xy = np.sum(x * y) sum_x2 = np.sum(x**2) a = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x**2) b = (sum_y - a * sum_x) / n Calculer les valeurs prédites : Utilisez les coefficients a et b pour calculer les valeurs prédites de y pour chaque valeur de x .\ny_pred = a * x + b Tracer le graphique : Utilisez Matplotlib pour tracer les points de données et la droite de régression.\nimport matplotlib.pyplot as plt plt.scatter(x, y, color='blue', label='Données réelles') plt.plot(x, y_pred, color='red', label='Régression linéaire') plt.xlabel('x') plt.ylabel('y') plt.title('Régression Linéaire') plt.legend() plt.show() Exemple Complet Voici le code complet pour calculer et tracer une droite de régression linéaire avec NumPy :\nimport numpy as np import matplotlib.pyplot as plt # Données x = np.array([1, 2, 3, 4, 5]) y = np.array([2, 3, 5, 7, 11]) # Calcul des coefficients n = len(x) sum_x = np.sum(x) sum_y = np.sum(y) sum_xy = np.sum(x * y) sum_x2 = np.sum(x**2) a = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x**2) b = (sum_y - a * sum_x) / n # Valeurs prédites y_pred = a * x + b # Tracer le graphique plt.scatter(x, y, color='blue', label='Données réelles') plt.plot(x, y_pred, color='red', label='Régression linéaire') plt.xlabel('x') plt.ylabel('y') plt.title('Régression Linéaire') plt.legend() plt.show()",
    "description": "Voici comment calculer une droite de régression linéaire en utilisant NumPy, une bibliothèque Python puissante pour les calculs numériques.\nÉtapes du calcul Importer NumPy : Tout d’abord, vous devez importer la bibliothèque NumPy.\nimport numpy as np Préparer les données : Vous devez avoir deux ensembles de données : les valeurs de la variable indépendante (x) et les valeurs de la variable dépendante (y).\nx = np.array([1, 2, 3, 4, 5]) y = np.array([2, 3, 5, 7, 11]) Calculer les coefficients de la croite de régression : Utilisez les formules de la régression linéaire pour calculer les coefficients a (pente) et b (ordonnée à l’origine).",
    "tags": [],
    "title": "Calcul d'une droite de régression linéaire avec NumPy",
    "uri": "/bases/langage-de-prog/reg-lineaire/reglineaire_numpy/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs :\nApprendre à utiliser les structures de contrôle pour la prise de décision. Contenu :\nConditions (if, elif, else). Activités : Exercices sur les conditions.",
    "description": "Objectifs :\nApprendre à utiliser les structures de contrôle pour la prise de décision. Contenu :\nConditions (if, elif, else). Activités : Exercices sur les conditions.",
    "tags": [],
    "title": "2. Structures de contrôle conditionnelles",
    "uri": "/semaine2/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs :\nManipuler les listes de données en Python.\nContenu :\nListes. Opérations sur les listes. Activités : Exercices sur la manipulation des listes.",
    "description": "Objectifs :\nManipuler les listes de données en Python.\nContenu :\nListes. Opérations sur les listes. Activités : Exercices sur la manipulation des listes.",
    "tags": [],
    "title": "3. Listes",
    "uri": "/semaine3/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs :\nApprendre à utiliser les structures de contrôle répétitives pour optimiser le code. Contenu :\nBoucles (for, while). Activités :\nQuiz 1 5%: Introduction à Python et les structures de contrôle Exercices sur les conditions et les boucles.",
    "description": "Objectifs :\nApprendre à utiliser les structures de contrôle répétitives pour optimiser le code. Contenu :\nBoucles (for, while). Activités :\nQuiz 1 5%: Introduction à Python et les structures de contrôle Exercices sur les conditions et les boucles.",
    "tags": [],
    "title": "4. Structures de contrôle répétitives",
    "uri": "/semaine4/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs :\nComprendre l’importance des fonctions et des modules. Contenu :\nDéfinition et appel de fonctions. Paramètres et retour de valeurs. Portées des variables Importation de modules. Activités :\nQuiz 2 (5%): Les listes et les structures répétitives. Création de fonctions simples et utilisation de modules standard.",
    "description": "Objectifs :\nComprendre l’importance des fonctions et des modules. Contenu :\nDéfinition et appel de fonctions. Paramètres et retour de valeurs. Portées des variables Importation de modules. Activités :\nQuiz 2 (5%): Les listes et les structures répétitives. Création de fonctions simples et utilisation de modules standard.",
    "tags": [],
    "title": "5. Fonctions et modules",
    "uri": "/semaine5/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs :\nApprendre à lire et écrire des fichiers. Contenu :\nOuverture, lecture et écriture de fichiers. . Activités : Projets pratiques sur la manipulation de fichiers.\nÉvaluation (Semaines 1 à 5) : Quiz 1",
    "description": "Objectifs :\nApprendre à lire et écrire des fichiers. Contenu :\nOuverture, lecture et écriture de fichiers. . Activités : Projets pratiques sur la manipulation de fichiers.\nÉvaluation (Semaines 1 à 5) : Quiz 1",
    "tags": [],
    "title": "6. Gestion des fichiers",
    "uri": "/semaine6/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs :\nUtiliser la bibliothèque Pandas pour extraire et filtrer des données scientifiques. Contenu :\nIntroduction à Pandas. Manipulation de données avec Pandas. Activités :\nQuiz 3 (5%): Fonctions et la gestion des fichiers Exercices pratiques avec Pandas.",
    "description": "Objectifs :\nUtiliser la bibliothèque Pandas pour extraire et filtrer des données scientifiques. Contenu :\nIntroduction à Pandas. Manipulation de données avec Pandas. Activités :\nQuiz 3 (5%): Fonctions et la gestion des fichiers Exercices pratiques avec Pandas.",
    "tags": [],
    "title": "7. Bibliothèque Pandas",
    "uri": "/semaine7/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs :\nUtiliser la bibliothèque NumPy pour analyser des données scientifiques. Contenu :\nIntroduction à NumPy. Analyse de données avec NumPy. Activités : Exercices pratiques avec NumPy.",
    "description": "Objectifs :\nUtiliser la bibliothèque NumPy pour analyser des données scientifiques. Contenu :\nIntroduction à NumPy. Analyse de données avec NumPy. Activités : Exercices pratiques avec NumPy.",
    "tags": [],
    "title": "8. Bibliothèque NumPy",
    "uri": "/semaine8/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs :\nUtiliser la bibliothèque Matplotlib pour visualiser des données scientifiques. Contenu :\nIntroduction à Matplotlib. Création de divers graphiques de données avec Matplotlib. Activités :\nQuiz 4 (5%): Pandas et NumPy Exercices pratiques avec Matplotlib.",
    "description": "Objectifs :\nUtiliser la bibliothèque Matplotlib pour visualiser des données scientifiques. Contenu :\nIntroduction à Matplotlib. Création de divers graphiques de données avec Matplotlib. Activités :\nQuiz 4 (5%): Pandas et NumPy Exercices pratiques avec Matplotlib.",
    "tags": [],
    "title": "9. Bibliothèque Matplotlib",
    "uri": "/semaine9/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 1. Langage de programmation \u003e Erreurs communes",
    "content": "La gestion des exceptions Python permet de gérer les exceptions à l’aide des blocs try-except. Cela permet d’attraper les erreurs et de les traiter de manière appropriée sans interrompre l’exécution du programme.\ntry: resultat = 10 / 0 except ZeroDivisionError: print(\"Erreur : division par zéro\") Il est également possible de gérer plusieurs types d’exceptions dans un même bloc try-except.\ntry: ma_liste = [1, 2, 3] print(ma_liste[5]) except IndexError: print(\"Erreur : index de liste incorrect\") except ZeroDivisionError: print(\"Erreur : division par zéro\")",
    "description": "La gestion des exceptions Python permet de gérer les exceptions à l’aide des blocs try-except. Cela permet d’attraper les erreurs et de les traiter de manière appropriée sans interrompre l’exécution du programme.\ntry: resultat = 10 / 0 except ZeroDivisionError: print(\"Erreur : division par zéro\") Il est également possible de gérer plusieurs types d’exceptions dans un même bloc try-except.\ntry: ma_liste = [1, 2, 3] print(ma_liste[5]) except IndexError: print(\"Erreur : index de liste incorrect\") except ZeroDivisionError: print(\"Erreur : division par zéro\")",
    "tags": [],
    "title": "Gestion des exceptions",
    "uri": "/bases/langage-de-prog/erreurs/gestionexceptions/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs :\nÉvaluer les apprentissages des 9 premières semaines. Contenu :\nLa base de Python (variables, types de données, structures de contrôle, listes) L’utilisation des bibliothèques scientifiques",
    "description": "Objectifs :\nÉvaluer les apprentissages des 9 premières semaines. Contenu :\nLa base de Python (variables, types de données, structures de contrôle, listes) L’utilisation des bibliothèques scientifiques",
    "tags": [],
    "title": "10. EXAMEN",
    "uri": "/semaine10/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs : Évaluer les apprentissages des 9 premières semaines.",
    "description": "Objectifs : Évaluer les apprentissages des 9 premières semaines.",
    "tags": [],
    "title": "11. PROJET FINAL - Extraction et filtrage",
    "uri": "/semaine11/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs : Évaluer",
    "description": "Objectifs : Évaluer",
    "tags": [],
    "title": "12. PROJET FINAL - Analyse statistique",
    "uri": "/semaine12/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs : Évaluer",
    "description": "Objectifs : Évaluer",
    "tags": [],
    "title": "13. PROJET FINAL - Visualisation des données",
    "uri": "/semaine13/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs : Évaluer",
    "description": "Objectifs : Évaluer",
    "tags": [],
    "title": "14. PROJET FINAL - Programmation lettrée",
    "uri": "/semaine14/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Objectifs : Évaluer",
    "description": "Objectifs : Évaluer",
    "tags": [],
    "title": "15. PROJET FINAL - Évaluation",
    "uri": "/semaine15/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Semaine 1 - Analyse de problèmes\nSemaine 2 - Ordinogrammes\nSemaine 2 - Base de Python\nSemaine 3 - Input() et print() Semaine 3 - Erreurs de syntaxe Semaine 4 - Expressions booléennes\nSemaine 4 - IF-ELIF-ELSE\nSemaine 4 - Tests de nombres flottants\nSemaine 5 - Boucle while\nSemaine 5 - Boucle for\nSemaine 5 - Instructions break, continue et else\nSemaine 6 - Listes - La base\nSemaine 6 - Listes - En sciences\nSemaine 6 - Listes - Système solaire\nSemaine 6 - Les chaines de caractères\nSemaine 7 - Révision Exercice 1\nSemaine 7 - Révision Exercice 1 avec utilisation de lower()\nSemaine 7 - Révision Exercice 1_V2\nSemaine 7 - Révision Exercice 2\nSemaine 8 - Fonctions\nSemaine 8 - Portées des variables\nSemaine 9 - Débogage avec print()\nSemaine 11 - Pandas\nSemaine 12 - Matplotlib",
    "description": "Semaine 1 - Analyse de problèmes\nSemaine 2 - Ordinogrammes\nSemaine 2 - Base de Python\nSemaine 3 - Input() et print() Semaine 3 - Erreurs de syntaxe Semaine 4 - Expressions booléennes\nSemaine 4 - IF-ELIF-ELSE\nSemaine 4 - Tests de nombres flottants\nSemaine 5 - Boucle while\nSemaine 5 - Boucle for\nSemaine 5 - Instructions break, continue et else",
    "tags": [],
    "title": "Solutions des ateliers",
    "uri": "/solutions-ateliers/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "Ici vous trouverez diverses informations sur Python et sur les outils utilisés dans le cours ou que vous pouvez utiliser sur votre ordinateur personnel à la maison.\nCette section est divisée en trois catégories:\n1. Langage de programmation 2. Outils 3. Lexique",
    "description": "Ici vous trouverez diverses informations sur Python et sur les outils utilisés dans le cours ou que vous pouvez utiliser sur votre ordinateur personnel à la maison.\nCette section est divisée en trois catégories:\n1. Langage de programmation 2. Outils 3. Lexique",
    "tags": [],
    "title": "Base de connaissances",
    "uri": "/bases/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances",
    "content": "Dans cette section, vous trouverez des informations relatives au langage de programmation Python. Dans certains cas, il peut s’agir de compléments au cours, dans d’autres, des notions plus avancées.",
    "description": "Base - Langage de programmation",
    "tags": [],
    "title": "1. Langage de programmation",
    "uri": "/bases/langage-de-prog/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances",
    "content": "Ici se trouve des informations sur les outils utilisés dans ce cours, pouvant vous être utiles.",
    "description": "Base - Outils",
    "tags": [],
    "title": "2. Outils",
    "uri": "/bases/outils/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances",
    "content": "Lexique de termes informatiques Voici le lexique réécrit en ordre alphabétique :\nAlgorithme Une série d’instructions définies pour résoudre un problème ou effectuer une tâche spécifique. Appel de fonction L’appel d’une fonction consiste à invoquer une fonction définie ailleurs dans le code pour qu’elle effectue une tâche spécifique. Lors de l’appel, on peut passer des arguments à la fonction, qui sont des valeurs ou des variables que la fonction utilisera pour effectuer ses opérations. La fonction peut ensuite retourner une valeur en guise de résultat. Booléen Un type de donnée qui ne peut prendre que deux valeurs : true (vrai) ou false (faux). Utilisé pour les conditions et les tests logiques. Boucle Une structure de contrôle qui permet de répéter une série d’instruction. En Python, les boucles sont for, while. D’autres langages de programmation incluent la boucle do-while. Classe Une structure qui permet de créer des objets en définissant leurs propriétés (attributs) et leurs comportements (méthodes). Utilisée dans la programmation orientée objet. Commentaire Lignes dans le code qui ne sont pas exécutées par python. Les commentaires sont utilisés pour expliquer et documenter le code, ce qui le rend plus lisible et compréhensible pour les autres développeurs (ou pour vous-même lorsque vous revenez sur votre code plus tard). Il sont aussi utilisés pour empêcher l’exécution (désactiver) de lignes de code lors du débogage. Il existe deux types de commentaires en Python : Commentaires sur une seule ligne : Ils commencent par le symbole # et continuent jusqu’à la fin de la ligne. Commentaires sur plusieurs lignes : Ils sont généralement créés en utilisant des chaînes de caractères multi-lignes (triple guillemets \"\"\" ou '''). Bien que ces chaînes ne soient pas techniquement des commentaires, elles sont souvent utilisées à cette fin. Compilateur Un programme qui traduit le code source écrit dans un langage de programmation en code machine exécutable par un ordinateur. Concaténation Action de mettre bout à bout deux chaînes de caractères ou plus pour en former une seule. Par exemple, concaténer “Hello” et “World” donne “HelloWorld”. Débogage Le processus de recherche et de correction des erreurs (ou “bugs”) dans un programme. Déclaration de variable Une instruction qui permet de créer une variable et de lui attribuer un nom. Cette déclaration réserve un espace en mémoire pour stocker une valeur qui peut être utilisée et modifiée au cours de l’exécution du programme. Décrémentation Action de diminuer la valeur d’une variable, généralement par un certain pas, souvent de 1. Docstring Une chaîne de caractères utilisée pour documenter un module, une classe ou une fonction dans le code source. Elle est généralement placée immédiatement après la définition de l’élément qu’elle documente et est utilisée pour expliquer son fonctionnement, ses paramètres et ses retours. Encapsulation Un concept fondamental en programmation orientée objet. Elle consiste à cacher les détails de l’implémentation d’un objet et à n’exposer que les aspects nécessaires pour interagir avec cet objet. Cela signifie que les données internes d’un objet sont protégées contre les modifications non autorisées et que l’accès à ces données se fait uniquement par des méthodes définies. Flottant Un type de donnée qui représente un nombre avec une partie décimale. Par exemple, 3.14 est un nombre flottant. Fonction Un bloc de code réutilisable qui effectue une tâche spécifique. Les fonctions peuvent prendre des paramètres et retourner des valeurs. IDE (Environnement de Développement Intégré) Un logiciel qui fournit des outils complets pour le développement de logiciels, incluant un éditeur de code, un débogueur, et souvent un compilateur. Imbrication Fait référence à la pratique consistant à placer une structure de code à l’intérieur d’une autre. Cela peut inclure des boucles, des conditions, des fonctions, ou même des ensembles de données. Incrémentation Action d’augmenter la valeur d’une variable, généralement par un certain pas, souvent de 1. Indentation Utilisation de tabulations au début des lignes de code pour indiquer la structure et la hiérarchie du code, notamment dans les boucles, les conditions, et les fonctions. En Python, l’indentation est essentielle pour définir les blocs de code. Itérable Qui peut subir une itération, être répété. Itération Répétition d’un processus ou d’une série d’instructions dans un programme informatique, souvent dans le cadre d’une boucle. Méthode Une fonction définie à l’intérieur d’une classe en programmation orientée objet. Les méthodes définissent les comportements des objets créés à partir de la classe. Ordinogramme Un diagramme qui représente graphiquement les étapes d’un algorithme ou d’un processus. Aussi appelé diagramme de flux ou flowchart. Pseudo-code Une manière informelle de décrire un algorithme en utilisant un mélange de langage naturel et de structures de programmation. Le pseudo-code aide à planifier et à comprendre le fonctionnement d’un algorithme sans se soucier de la syntaxe exacte d’un langage de programmation. Récursivité Une technique de programmation où une fonction s’appelle elle-même pour résoudre un problème. Cette méthode est souvent utilisée pour résoudre des problèmes complexes en les décomposant en sous-problèmes plus simples. Retour de fonction C’est la valeur ou l’ensemble de valeurs qu’une fonction renvoie après son exécution. Cette valeur est souvent utilisée pour continuer le traitement ou pour obtenir un résultat spécifique à partir de la fonction appelée. String Un type de donnée qui représente une chaîne de caractères. Par exemple, “Hello, World!” est une string. Variable Un espace de stockage nommé qui peut contenir une valeur. Les variables permettent de manipuler et de stocker des données dans un programme.",
    "description": "Base - Lexique",
    "tags": [],
    "title": "3. Lexique",
    "uri": "/bases/lexique/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils",
    "content": "Blocs-notes Jupyter dans VS Code Jupyter (anciennement IPython Notebook) est un projet open source qui vous permet de combiner facilement du texte Markdown et du code source Python exécutable sur un canevas appelé notebook.\nVisual Studio Code prend en charge l’utilisation des blocs-notes Jupyter en mode natif et via des fichiers de code Python.\nCréer, ouvrir et enregistrer des blocs-notes Jupyter Utiliser des cellules de code Jupyter Afficher, inspecter et filtrer les variables à l’aide de l’Explorateur de variables et de la visionneuse de données Se connecter à un serveur Jupyter distant Déboguer un bloc-notes Jupyter Configuration de votre environnement Pour utiliser Python dans Jupyter Notebooks, vous devez activer un environnement Anaconda dans VS Code ou un autre environnement Python dans lequel vous avez installé le package Jupyter. Pour sélectionner un environnement, utilisez la commande Python : Sélectionner un interpréteur dans la palette de commandes (Ctrl+Maj+P).\nUne fois l’environnement approprié activé, vous pouvez créer et ouvrir un bloc-notes Jupyter, vous connecter à un serveur Jupyter distant pour exécuter des cellules de code et exporter un bloc-notes Jupyter sous forme de fichier Python.\nApprobation de l’espace de travail Lorsque vous commencez à utiliser Jupyter Notebooks, vous devez vous assurer que vous travaillez dans un espace de travail approuvé. Du code nuisible peut être incorporé dans des blocs-notes et la fonctionnalité d’approbation de l’espace de travail vous permet d’indiquer quels dossiers et leur contenu doivent autoriser ou restreindre l’exécution automatique de code.\nSi vous tentez d’ouvrir un bloc-notes lorsque VS Code se trouve dans un espace de travail non approuvé exécutant le mode restreint, vous ne pourrez pas exécuter de cellules et les sorties enrichies seront masquées.\nCréer ou ouvrir un bloc-notes Jupyter Vous pouvez créer un bloc-notes Jupyter en exécutant la commande Créer : un nouveau bloc-notes Jupyter à partir de la palette de commandes (Ctrl+Maj+P) ou en créant un fichier dans votre espace de travail..ipynb\nEnsuite, sélectionnez un noyau à l’aide du sélecteur de noyau en haut à droite.\nAprès avoir sélectionné un noyau, le sélecteur de langue situé en bas à droite de chaque cellule de code sera automatiquement mis à jour vers la langue prise en charge par le noyau.\nSi vous disposez d’un bloc-notes Jupyter, vous pouvez l’ouvrir en cliquant avec le bouton droit sur le fichier et en l’ouvrant avec VS Code, ou via l’explorateur de fichiers VS Code.\nCellules en cours d’exécution Exécuter une seule cellule de code Une fois votre code ajouté, vous pouvez exécuter une cellule à l’aide de l’icône Exécuter à gauche de la cellule et la sortie sera affichée sous la cellule de code.\nPour exécuter une cellule de code sélectionnée, vous pouvez également utiliser des raccourcis clavier en mode commande et en mode édition.\nCtrl+Entrée exécute la cellule actuellement sélectionnée. Maj+Entrée exécute la cellule actuellement sélectionnée et insère une nouvelle cellule juste en dessous (le focus se déplace vers la nouvelle cellule). Alt+Entrée exécute la cellule actuellement sélectionnée et insère une nouvelle cellule juste en dessous (le focus reste sur la cellule actuelle). Exécuter plusieurs cellules de code L’exécution de plusieurs cellules de code peut être accomplie de plusieurs façons. Vous pouvez utiliser la double flèche dans la barre d’outils principale de l’éditeur de bloc-notes pour exécuter toutes les cellules du bloc-notes ou en sélectionnant Exécuter tout, Exécuter tout au-dessus ou Exécuter tout en dessous au-dessus ou en dessous de la cellule de code actuelle.\nExécuter des cellules dans la section Pour exécuter plus facilement des cellules associées dans un bloc-notes, vous pouvez exécuter des cellules regroupées par un en-tête de section Markdown avec l’action Exécuter les cellules dans la section. Cette action est disponible dans la vue Plan du bloc-notes et pour les éléments Sticky Scroll.\nDans les éléments Sticky Scroll, cliquez avec le bouton droit sur l’en-tête de votre choix et exécutez la section via l’action dans le menu contextuel. Dans la vue Plan, sélectionnez l’icône de barre d’outils qui apparaît au survol ou à la sélection, puis exécutez une seule cellule ou une section de cellules via les actions présentées.\nVidéo: Exécuter des cellules\nEnregistrez votre bloc-notes Jupyter Vous pouvez enregistrer votre bloc-notes Jupyter à l’aide du raccourci clavier Ctrl+S ou Fichier \u003e enregistrer.\nExporter votre bloc-notes Jupyter Vous pouvez exporter un bloc-notes Jupyter sous forme de fichier Python, de fichier PDF ou de fichier HTML. Pour exporter, sélectionnez ... \u003e Exporter dans la barre d’outils principale. Une liste déroulante d’options de format de fichier vous est alors présentée.\nNote: Pour l’exportation PDF, vous devez avoir installé TeX (Installation Tex). Si vous ne le faites pas, vous serez averti que vous devez l’installer lorsque vous sélectionnerez l’option PDF. Sachez également que si vous avez une sortie SVG uniquement dans votre bloc-notes, elle ne sera pas affichée dans le PDF. Pour avoir des graphiques SVG dans un PDF, assurez-vous que votre sortie inclut un format d’image non SVG, ou bien vous pouvez d’abord exporter au format HTML, puis enregistrer au format PDF à l’aide de votre navigateur.\nUtiliser des cellules de code dans l’éditeur de bloc-notes L’éditeur de bloc-notes facilite la création, la modification et l’exécution de cellules de code dans votre bloc-notes Jupyter.\nCréer une cellule de code Par défaut, un bloc-notes vierge aura une cellule de code vide pour commencer et un bloc-notes existant en placera une en bas. Ajoutez votre code à la cellule de code vide pour commencer.\nModes de cellule de code Lorsque vous utilisez des cellules de code, une cellule peut être dans trois états : non sélectionné, mode commande et mode édition. Une barre verticale à gauche d’une cellule de code et de la bordure de l’éditeur indique l’état actuel d’une cellule. Lorsqu’aucune barre n’est visible, la cellule est désélectionnée. Lorsqu’une cellule est sélectionnée, elle peut être en mode commande ou en mode édition.\nEn mode commande, une barre verticale pleine apparaîtra à gauche de la cellule. La cellule peut être utilisée et accepte les commandes au clavier.\nEn mode édition, une barre verticale pleine est reliée par une bordure autour de l’éditeur de cellules. Le contenu de la cellule (code ou Markdown) peut être modifié.\nPour changer de mode, vous pouvez utiliser votre clavier ou votre souris. Sur votre clavier, appuyez sur la touche Entrée pour passer en mode édition ou sur la touche Échap pour passer en mode commande. Avec votre souris, cliquez sur la barre verticale à gauche de la cellule ou en dehors de la zone code/Markdown dans la cellule de code.\nAjouter des cellules de code supplémentaires Vous pouvez ajouter des cellules de code à l’aide de la barre d’outils principale, de la barre d’outils Ajouter une cellule (visible au survol) et des commandes clavier.\nPour ajouter une nouvelle cellule sous la cellule actuellement sélectionnée, utilisez l’icône plus dans la barre d’outils principale ou la barre d’outils de survol d’une cellule.\nLorsqu’une cellule de code est en mode commande, utilisez la touche A pour ajouter une cellule au-dessus et la touche B pour ajouter une cellule au-dessous de la cellule sélectionnée.\nSélectionnez une cellule de code Vous pouvez modifier une cellule de code sélectionnée à l’aide de la souris ou des touches fléchées haut/bas du clavier. Lorsqu’une cellule de code est en mode commande, vous pouvez également utiliser la touche J (bas) et la touche K (haut).\nSélectionner plusieurs cellules de code Pour sélectionner plusieurs cellules, commencez par une cellule en mode sélectionné. Un arrière-plan rempli indique les cellules sélectionnées. Pour sélectionner des cellules consécutives, maintenez la touche Maj enfoncée et cliquez sur la dernière cellule que vous souhaitez sélectionner. Pour sélectionner un groupe de cellules, maintenez la touche Ctrl enfoncée et cliquez sur les cellules que vous souhaitez ajouter à votre sélection.\nDéplacer une cellule de code Vous pouvez déplacer des cellules vers le haut ou vers le bas dans un bloc-notes par glisser-déposer. Pour les cellules de code, la zone de glisser-déposer se trouve à gauche de l’éditeur de cellule, comme indiqué ci-dessous. Pour les cellules Markdown rendues, vous pouvez cliquer n’importe où pour faire glisser et déposer des cellules.\nPour déplacer plusieurs cellules, vous pouvez utiliser les mêmes zones de glisser-déposer dans n’importe quelle cellule incluse dans la sélection.\nLe raccourci clavier Alt+Flèche déplace également une ou plusieurs cellules sélectionnées.\nSupprimer une cellule de code Pour supprimer du code, vous pouvez utiliser l’icône Supprimer dans la barre d’outils de la cellule de code. Lorsque la cellule de code sélectionnée est en mode commande, vous pouvez utiliser le raccourci clavier dd.\nAnnuler votre dernière modification Vous pouvez utiliser la touche z pour annuler votre modification précédente, par exemple, si vous avez effectué une modification accidentelle, vous pouvez l’annuler à l’état correct précédent, ou si vous avez supprimé une cellule accidentellement, vous pouvez la récupérer.\nBasculer entre le code et Markdown L’éditeur de bloc-notes vous permet de modifier facilement les cellules de code entre Markdown et le code. La sélection du sélecteur de langue en bas à droite d’une cellule vous permettra de basculer entre Markdown et, le cas échéant, toute autre langue prise en charge par le noyau sélectionné.\nVous pouvez également utiliser le clavier pour modifier le type de cellule. Lorsqu’une cellule est sélectionnée et en mode commande, la touche M bascule le type de cellule sur Markdown et la touche Y bascule le type de cellule sur code.\nUne fois Markdown défini, vous pouvez entrer du contenu au format Markdown dans la cellule de code.\nPour afficher des cellules Markdown, vous pouvez cocher la barre d’outils de la cellule ou utiliser les raccourcis clavier Ctrl+Entrée et Maj+Entrée.\nEffacer la sortie ou redémarrer/interrompre le noyau Si vous souhaitez effacer toutes les sorties de cellule de code ou redémarrer/interrompre le noyau, vous pouvez le faire à l’aide de la barre d’outils principale de l’éditeur de bloc-notes.\nActiver/désactiver les numéros de ligne Lorsque vous êtes en mode commande, vous pouvez activer ou désactiver la numérotation des lignes dans une seule cellule de code à l’aide de la touche L.\nPour basculer la numérotation des lignes pour l’ensemble du bloc-notes, utilisez Maj+L en mode commande sur n’importe quelle cellule.\nTable des matières Pour naviguer dans votre bloc-notes, ouvrez l’Explorateur de fichiers dans la barre d’activité. Ouvrez ensuite l’onglet Plan dans la barre latérale.\nNote: Par défaut, le plan n’affichera que Markdown. Pour afficher les cellules de code, activez le paramètre suivant : Contour du bloc-notes \u003e : Afficher les cellules de code.\nPrise en charge d’IntelliSense dans l’éditeur de bloc-notes Jupyter La fenêtre Python Jupyter Notebook Editor contient des informations complètes sur IntelliSense : saisie semi-automatique du code, listes de membres, informations rapides sur les méthodes et conseils de paramètre. Vous pouvez être tout aussi productif en tapant dans la fenêtre de l’éditeur de bloc-notes que dans l’éditeur de code.\nExplorateur de variables et visionneuse de données Dans un bloc-notes Python, il est possible d’afficher, d’inspecter, de trier et de filtrer les variables de votre session Jupyter actuelle. En sélectionnant l’icône Variables dans la barre d’outils principale après avoir exécuté le code et les cellules, vous verrez une liste des variables actuelles, qui seront automatiquement mises à jour au fur et à mesure que les variables sont utilisées dans le code. Le volet des variables s’ouvre en bas du bloc-notes.\nVisionneuse de données Pour plus d’informations sur vos variables, vous pouvez également double-cliquer sur une ligne ou utiliser le bouton Afficher la variable dans la visionneuse de données en regard de la variable pour obtenir une vue plus détaillée d’une variable dans la visionneuse de données.\nVous pouvez également utiliser l’expérience de visualisation des données offerte par d’autres extensions comme Data Wrangler. L’extension Data Wrangler offre une interface utilisateur riche pour afficher des informations sur vos données et vous aide à effectuer le profilage des données, les contrôles qualité, les transformations, etc.\nFiltrage des lignes Le filtrage des lignes dans la visionneuse de données peut être effectué en tapant dans la zone de texte en haut de chaque colonne. Tapez une chaîne que vous souhaitez rechercher et toute ligne contenant cette chaîne dans la colonne sera trouvée :\nSi vous voulez trouver une correspondance exacte, faites précéder votre filtre de ‘=’ :\nSauvegarde des parcelles Pour enregistrer un tracé à partir de votre bloc-notes, il suffit de survoler la sortie et de sélectionner l’icône Enregistrer en haut à droite.\nDéboguer un bloc-notes Jupyter Il existe deux façons différentes de déboguer un notebook Jupyter : un mode plus simple appelé « Run by Line » et un mode de débogage complet.\nNote: Ces deux fonctionnalités nécessitent ipykernel 6+.\nDéboguer par ligne Exécuter par ligne vous permet d’exécuter une cellule une ligne à la fois, sans être distrait par d’autres fonctionnalités de débogage VS Code. Pour commencer, sélectionnez le bouton Exécuter par ligne dans la barre d’outils de la cellule :\nUtilisez le même bouton pour avancer d’une déclaration. Vous pouvez sélectionner le bouton Arrêter la cellule pour arrêter plus tôt ou le bouton Continuer dans la barre d’outils pour continuer à s’exécuter jusqu’à la fin de la cellule.\nDéboguer la cellule Si vous souhaitez utiliser l’ensemble complet des fonctionnalités de débogage prises en charge dans VS Code, telles que les points d’arrêt et la possibilité d’effectuer un pas à pas détaillé dans d’autres cellules et modules, vous pouvez utiliser le débogueur VS Code complet.\nCommencez par définir les points d’arrêt dont vous avez besoin en cliquant dans la marge gauche d’une cellule de bloc-notes. Sélectionnez ensuite le bouton Déboguer la cellule dans le menu en regard du bouton Exécuter. Cela exécutera la cellule dans une session de débogage et s’arrêtera sur vos points d’arrêt dans tout code en cours d’exécution, même s’il se trouve dans une autre cellule ou un autre fichier..py Vous pouvez utiliser la vue Déboguer, la console Déboguer et tous les boutons de la barre d’outils Déboguer comme vous le feriez normalement dans VS Code. Rechercher dans le bloc-notes Vous pouvez effectuer une recherche dans un bloc-notes (ou des parties de celui-ci en filtrant les options de recherche) à l’aide du raccourci clavier Ctrl/Cmd + F. Cliquez sur l’option Filtrer (icône en forme d’entonnoir) pour effectuer une recherche dans :\nEntrée de cellule Markdown (Markdown Source) Sortie de cellule Markdown (Markdown rendu) Entrée de cellule de code (Source de cellule de code) Sortie de cellule de code (Sortie de cellule) Les recherches de bloc-notes sont des entrées de cellule filtrées uniquement par défaut.\nRéférence: Documentation de VS Code",
    "description": "Blocs-notes Jupyter dans VS Code Jupyter (anciennement IPython Notebook) est un projet open source qui vous permet de combiner facilement du texte Markdown et du code source Python exécutable sur un canevas appelé notebook.\nVisual Studio Code prend en charge l’utilisation des blocs-notes Jupyter en mode natif et via des fichiers de code Python.\nCréer, ouvrir et enregistrer des blocs-notes Jupyter Utiliser des cellules de code Jupyter Afficher, inspecter et filtrer les variables à l’aide de l’Explorateur de variables et de la visionneuse de données Se connecter à un serveur Jupyter distant Déboguer un bloc-notes Jupyter Configuration de votre environnement Pour utiliser Python dans Jupyter Notebooks, vous devez activer un environnement Anaconda dans VS Code ou un autre environnement Python dans lequel vous avez installé le package Jupyter. Pour sélectionner un environnement, utilisez la commande Python : Sélectionner un interpréteur dans la palette de commandes (Ctrl+Maj+P).",
    "tags": [],
    "title": "Jupyter",
    "uri": "/bases/outils/jupyter/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils",
    "content": "Introduction au Markdown dans Jupyter Notebook Markdown est un langage de balisage léger qui vous permet de formater du texte en utilisant une syntaxe simple. Dans Jupyter Notebook, vous pouvez utiliser des cellules Markdown pour ajouter des titres, des listes, des liens, des images, et bien plus encore.\nComment créer une cellule Markdown Créer une nouvelle cellule : Cliquez sur le bouton “+” dans la barre d’outils pour ajouter une nouvelle cellule. Changer le type de cellule : Cliquez sur le menu déroulant “Code” dans la barre d’outils et sélectionnez “Markdown”. Vous pouvez également utiliser le raccourci clavier Esc puis M. Écrire du texte en Markdown : Tapez votre texte en utilisant la syntaxe Markdown. Exécuter la cellule : Appuyez sur Shift + Enter pour exécuter la cellule et afficher le texte formaté. Les bases du Markdown Titres et sous-titres:\nUtilisez les dièses # pour créer des titres. Le nombre de dièses indique le niveau du titre.\n# Titre de niveau 1 ## Titre de niveau 2 ### Titre de niveau 3 Texte en gras et en italique:\nPour mettre du texte en gras, encadrez-le avec deux astérisques ** ou deux tirets bas __.\n**texte en gras** __texte en gras__ Pour mettre du texte en italique, encadrez-le avec un astérisque * ou un tiret bas _.\n*texte en italique* _texte en italique_ Pour mettre du texte en gras et en italique, encadrez-le avec trois astérisques *** ou trois tirets bas ___.\n***Gras et italique*** ___Gras et italique___ Texte souligné\nEn Markdown, il n’y a pas de syntaxe native pour souligner du texte. Cependant, vous pouvez utiliser des balises HTML pour obtenir cet effet. Voici comment faire :\n\u003cu\u003eTexte souligné\u003c/u\u003e Listes:\nListes à puces:\nUtilisez des tirets -, des astérisques * ou des signes plus + pour créer des listes à puces.\n- Élément 1 - Élément 2 - Élément 3 Listes numérotées:\nUtilisez des chiffres suivis d’un point pour créer des listes numérotées.\n1. Premier élément 2. Deuxième élément 3. Troisième élément Liens et images:\nPour insérer un lien, utilisez la syntaxe suivante :\n[Texte du lien](URL_du_lien) Pour insérer une image, utilisez la syntaxe suivante :\n![Texte alternatif](URL_de_l'image) Blocs de code:\nUtilisez des accents graves ` (backticks) pour insérer du code en ligne :\n`print(\"Hello, World!\")` Tableaux:\nCréez des tableaux en utilisant des barres verticales | et des traits d’union - pour délimiter les en-têtes et les colonnes :\n| En-tête 1 | En-tête 2 | |-----------|-----------| | Cellule 1 | Cellule 2 | | Cellule 3 | Cellule 4 | Citations:\nUtilisez le symbole \u003e pour créer des citations.\n\u003e Ceci est une citation. Formules mathématiques:\nUtilisez LaTeX pour écrire des formules mathématiques. Encadrez vos formules avec des signes dollar $.\n$E = mc^2$ Texte barré: Utilisez deux tildes ~~ pour barrer du texte.\n~~texte barré~~ Blocs de texte surligné: Utilisez trois accents graves ^^^ pour surligner des blocs de texte.\n^^^markdown Exemples pratiques Exemple de titre et de paragraphe # Mon chapitre sur le Markdown Bienvenue dans ce chapitre sur le Markdown dans Jupyter Notebook. Vous apprendrez à formater du texte facilement. Exemple de liste et de lien ## Liste des sujets abordés - Introduction au Markdown - Syntaxe de base - Les titres - Texte en gras et en italique - Les listes - Exemples pratiques - [Documentation officielle](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Working%20With%20Markdown%20Cells.html) Exemple d’image et de bloc de code ## Exemple d'image ![Logo Jupyter](https://jupyter.org/assets/main-logo.svg) ## Exemple de code Python ```python def salut(nom): return f\"Hello, {nom}!\" print(salut(\"world\")) Vidéo YouTube Créer des cellules Markdowns dans Jupyter Notebook",
    "description": "Introduction au Markdown dans Jupyter Notebook Markdown est un langage de balisage léger qui vous permet de formater du texte en utilisant une syntaxe simple. Dans Jupyter Notebook, vous pouvez utiliser des cellules Markdown pour ajouter des titres, des listes, des liens, des images, et bien plus encore.\nComment créer une cellule Markdown Créer une nouvelle cellule : Cliquez sur le bouton “+” dans la barre d’outils pour ajouter une nouvelle cellule. Changer le type de cellule : Cliquez sur le menu déroulant “Code” dans la barre d’outils et sélectionnez “Markdown”. Vous pouvez également utiliser le raccourci clavier Esc puis M. Écrire du texte en Markdown : Tapez votre texte en utilisant la syntaxe Markdown. Exécuter la cellule : Appuyez sur Shift + Enter pour exécuter la cellule et afficher le texte formaté. Les bases du Markdown Titres et sous-titres:",
    "tags": [],
    "title": "MarkDown",
    "uri": "/bases/outils/markdown/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Utilisation de VS Code",
    "content": "Visual Studio Code \u0026 Jupyter Notebook Dans ce cours, nous allons utiliser deux outils pour analyser des données scientifiques avec Python. Il s’agit de Visual Studio Code et Jupyter Notebook.\nVisual Studio Code Visual Studio Code est comme un cahier de notes pour écrire du code.\nIl est gratuit et peut être utilisé avec beaucoup de langages de programmation, dont Python.\nIl a des fonctionnalités cool, comme :\naider à compléter le code. trouver des erreurs mettre en forme le code, etc. On peut aussi ajouter des extensions pour avoir plus de fonctionnalités, comme intégrer des bibliothèques scientifiques, des vérificateurs de code, des testeurs, etc.\nVisual Studio Code est donc un super outil pour écrire, exécuter et tester du code Python de manière efficace.\nL’interface de VS Code Visual Studio Code: Guide d’utilisation\nJupyter Notebook Jupyter Notebook est comme un cahier de laboratoire interactif sur le web.\nOn peut y créer et partager des documents qui contiennent du code, des résultats, des explications, des graphiques, etc.\nC’est un outil très pratique pour :\nexplorer des données. faire des analyses. montrer des informations, etc. Il facilite la création de la documentation.\nJupyter Notebook peut être utilisé avec plusieurs langages de programmation, mais il est surtout utilisé avec Python.\nPour l’utiliser, il faut installer un environnement Python, qui fournit les bibliothèques nécessaires. Ces deux outils ont des avantages et des inconvénients, et ils sont complémentaires.\nSi vous souhaitez les installer, les configurer et les utiliser chez vous sur votre ordinateur personnel pour analyser des données scientifiques avec Python, ci-dessous vous trouverez des ressources utiles.\nInstallation des outils Pour ceux qui ont un système d’exploitation Windows, voici deux fichiers exécutables qui installeront automatiquement VS Code, Python et toutes les librairies nécessaires :\nPremière étape Deuxième étape Pour une installation manuelle : voici les liens utiles pour installer les outils de développement (sur votre ordinateur personnel):\nTélécharger et installer Python : Python\nTélécharger et installer Visual Studio Code : Visual Studio Code - Mac, Linux, Windows\nLes extensions et bibliothèques à installer dans VS Code: Python, Run, Pandas, Numpy, Matplotlib, SciPy Tutoriel pour installer des extensions sur VS Code\nInstaller Jupyter Notebook sur Visual Studio Code (en anglais) : How to Install Jupyter Notebook in VSCode | Jupyter Notebook in Visual Studio Code (Easy)\nTutoriel pour VS Code et Jupyter Notebook Voici un fichier qui vous expliquera comment utiliser jupyter notebook dans VS Code : Tutoriel pour utiliser Jupyter avec VS Code",
    "description": "Visual Studio Code \u0026 Jupyter Notebook Dans ce cours, nous allons utiliser deux outils pour analyser des données scientifiques avec Python. Il s’agit de Visual Studio Code et Jupyter Notebook.\nVisual Studio Code Visual Studio Code est comme un cahier de notes pour écrire du code.",
    "tags": [],
    "title": "Visual Studio Code \u0026 Jupyter",
    "uri": "/bases/outils/vs-code/vs-code-jupyter/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils \u003e Utilisation de VS Code",
    "content": "Sur cette page, vous trouverez les étapes pour sauvegarder vos programmes dans VS Code.\nSauvegarde automatique Si un rond est présent à droit du nom du fichier dans l’onglet en haut, c’est que votre travail n’est PAS sauvegardé (comme dans l’exemple ci-dessous).\nPour ACTIVER la sauvegarde automatique, allez dans fichier, puis cliquez sur Enregistrement automatique.\nVous devriez maintenant voir un crochet à gauche de cette option.\nIl devrait maintenant avoir un X à gauche du nom du fichier dans l’onglet du haut. Ce qui signifie que le fichier est sauvegardé.\nEnregistrer sous Lorsque vous ouvrez un fichier que vous avez téléchargé (de la page du cours), vous pouvez l’enregistrer sous afin qu’il se sauvegarde au bon endroit. Par exemple dans votre One Drive du collège.\nSélectionnez Fichier, puis enregistrer sous.\nAssurez de choisir le bon dossier (exemple: OneDrive\\420-SN1-RE\\semaine_2). Vous pouvez renommer le fichier si vous le désirez. Ensuite, appuyez sur Enregistrer.\nOuvrir le dossier Dans le panneau de gauche, sélectionnez Ouvrir le dossier. L’option Ouvrir le dossier est aussi dans l’onlget Fichier.\nSélectionnez le dossier dans lequel vous voulez travailler.\nDans le panneau de gauche, vous devriez avoir tous les dossiers et fichiers contenus dans le dossier que vous avez choisi.\nDans l’exemple ci-dessous, nous pouvons voir le fichier (programme.ipynb) qui a été sauvegardé dans la semaine 3.",
    "description": "Sur cette page, vous trouverez les étapes pour sauvegarder vos programmes dans VS Code.\nSauvegarde automatique Si un rond est présent à droit du nom du fichier dans l’onglet en haut, c’est que votre travail n’est PAS sauvegardé (comme dans l’exemple ci-dessous).",
    "tags": [],
    "title": "Sauvegarde avec Visual Studio Code",
    "uri": "/bases/outils/vs-code/sauvegarge-automatique/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences \u003e Base de connaissances \u003e 2. Outils",
    "content": "Google Colab, ou Colaboratory, est un service cloud gratuit proposé par Google, basé sur Jupyter Notebook. Colab permet d’exécuter du code Python directement dans le navigateur sans nécessiter de configuration préalable, tout en offrant un accès gratuit aux processeurs graphiques (GPU ou Graphics Processing), pour accélérer les calculs.\nAccéder à Google Colab Pour commencer à utiliser Google Colab, suivez ces étapes simples :\nVia le site de Google Colab Allez sur le site: Google Colab. Cliquez sur le bouton Open Colab. Si la fenêtre Ouvrir le notebook s’ouvre, cliquez sur le bouton + Nouveau notebook pour créer un nouveau notebook. Sinon, une fois sur l’interface de Colab, vous pouvez créer un nouveau notebook en utilisant le menu Fichier et en sélectionnant Nouveau notebook. Les notebooks Colab permettent d’écrire et d’exécuter du code Python. Par exemple, pour exécuter une cellule de code, cliquez dessus et appuyez sur le bouton de lecture ou utilisez le raccourci clavier Ctrl+Entrée.\nVia votre compte Google Drive Ouvrez votre compte Google Drive, cliquez sur Nouveau, puis sur Plus et sélectionnez Google Colaboratory. Utilisation des bibliothèques Python Colab permet d’utiliser des bibliothèques populaires pour l’analyse et la visualisation des données. Par exemple, pour générer des données aléatoires avec NumPy et les visualiser avec Matplotlib :\nimport numpy as np import matplotlib.pyplot as plt ys = 200 + np.random.randn(100) x = [x for x in range(len(ys))] plt.figure(figsize=(10, 6)) plt.plot(x, ys, '-') plt.fill_between(x, ys, 195, where=(ys \u003e 195), facecolor='g', alpha=0.6) plt.show() Collaboration et partage Les notebooks Colab sont enregistrés dans votre compte Google Drive, ce qui facilite le partage et la collaboration. Vous pouvez partager vos notebooks avec d’autres utilisateurs, qui peuvent les commenter ou les modifier.\nUtiliser Colab Lire ce notebook",
    "description": "Google Colab, ou Colaboratory, est un service cloud gratuit proposé par Google, basé sur Jupyter Notebook. Colab permet d’exécuter du code Python directement dans le navigateur sans nécessiter de configuration préalable, tout en offrant un accès gratuit aux processeurs graphiques (GPU ou Graphics Processing), pour accélérer les calculs.\nAccéder à Google Colab Pour commencer à utiliser Google Colab, suivez ces étapes simples :",
    "tags": [],
    "title": "Google Colab",
    "uri": "/bases/outils/google-colab/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Chers élèves,\nNous vous rappelons que dans le cadre de ce cours, il est impératif d’utiliser seulement les notions, fonctions et concepts qui ont été abordés en classe. Cela garantit une compréhension solide et progressive des sujets traités.\nNote importante : L’utilisation d’outils d’intelligence artificielle pour générer du code, peut parfois fournir du code qui dépassent le cadre des notions étudiées.\nAttention Si vous soumettez du code contenant des éléments avancés qui n’ont pas été vus dans le cours, vous recevrez une note de 0 pour l’évaluation.\nPS: Dans Base de connaissances, vous trouverez un ensemble de connaissances plus avancées, sur Python et la programmation en général, tel qu’un lexique. Il s’agit de pages de références.\nMerci de votre compréhension et de votre coopération.",
    "description": "Chers élèves,\nNous vous rappelons que dans le cadre de ce cours, il est impératif d’utiliser seulement les notions, fonctions et concepts qui ont été abordés en classe. Cela garantit une compréhension solide et progressive des sujets traités.\nNote importante : L’utilisation d’outils d’intelligence artificielle pour générer du code, peut parfois fournir du code qui dépassent le cadre des notions étudiées.\nAttention Si vous soumettez du code contenant des éléments avancés qui n’ont pas été vus dans le cours, vous recevrez une note de 0 pour l’évaluation.",
    "tags": [],
    "title": "Programmation en sciences",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "Programmation en sciences",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
